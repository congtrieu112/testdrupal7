<?php

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 * @file
 * kb_maison.module
 */
// 50 items per page.
//define('TOTAL_ITEMS_PER_PAGE', 50);
// Admin uri links.
define('ADMIN_CONTENT_MAISON_MANAGE_URI', 'admin/content/maison/manage/');
define('ADMIN_CONTENT_MAISON_URI', 'admin/content/maison');

/**
 * Implements hook_entity_info().
 */
function kb_maison_entity_info() {
  $kb_maison_entity_info['kb_maison'] = array(
    'label' => t('Maison'),
    'label callback' => 'kb_maison_label_callback',
    'entity class' => 'Maison',
    'controller class' => 'MaisonController',
    'base table' => 'maison',
    'uri callback' => 'kb_maison_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'idkm',
    ),
    'uri callback' => 'entity_class_uri',
    'load hook' => 'kb_maison_load',
    'static cache' => TRUE,
    'admin ui' => array(
      'path' => 'admin/content/maison',
      'controller class' => 'MaisonUIController',
      'file' => 'kb_maison.admin.inc',
    ),
    'module' => 'kb_maison',
    'access callback' => 'kb_maison_access_callback',
    'bundles' => array(
      'kb_maison' => array(
        'label' => 'Maison',
        'admin' => array(
          'path' => 'admin/structure/maison/manage/fields',
        //'access arguments' => array('administer maison'),
        ),
      ),
    ),
    'views controller class' => 'EntityDefaultViewsController',
  );

  return $kb_maison_entity_info;
}

/**
 * Implements hook_menu().
 */
function kb_maison_menu() {
  $items = array();

  $items['maison/%maison'] = array(
    'title' => 'Maison',
    'page callback' => 'kb_maison_view_entity',
    'page arguments' => array(1),
    'access callback' => 'kb_maison_access_menu_callback',
    'access arguments' => array('view', 1),
  );

  $items['maison/locate'] = array(
    'page callback' => 'kb_maison_locate_callback',
    'access arguments' => array('access content'),
  );

  $items['admin/content/l/bulk/delete/%'] = array(
    'title' => 'Bulk Delete Maison',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kb_maison_bulk_delete', 5),
    'access arguments' => array('administer maison entities'),
    'file' => 'kb_maison.admin.inc',
  );

  $items['admin/structure/maison'] = array(
    'title' => 'Maison Fields',
    'access arguments' => array('administer maison entities'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['import-maison'] = array(
    'title' => 'Import',
    'page callback' => 'action_import_maison',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  $items['import-maison-batch'] = array(
    'title' => 'Import',
    'page callback' => 'action_import_maison_batch',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );

  return $items;
}

function action_import_maison_batch() {
  $import_maison_batch = new import_maison_batch();
  return $import_maison_batch->start();
}

function action_import_maison() {
}

/**
 * Implements hook_permission().
 */
function kb_maison_permission() {
  return array(
    'administer maison entities' => array(
      'title' => t('Administer Maison Entities'),
      'description' => t('Allows a user to administer lawmaker entities'),
    ),
    'view maison entities' => array(
      'title' => t('View Maison Entity'),
      'description' => t('Allows a user to view the maison entities.'),
    ),
    'create maison entities' => array(
      'title' => t('Create Maison Entities'),
      'description' => t('Allows a user to create maison entities.'),
    ),
    'edit maison entities' => array(
      'title' => t('Edit Maison Entities'),
      'description' => t('Allows a user to edit maison entities.'),
    ),
    'delete maison entities' => array(
      'title' => t('Delete Maison Entities'),
      'description' => t('Allows a user to delete maison entities.'),
    ),
    'use maison bulk operations' => array(
      'title' => t('Do bulk operations on Maison entities'),
      'description' => t('Allows a user to do bulk operations.'),
    ),
  );
}

/**
 * Check access permission for Maison Entity UI.
 */
function kb_maison_access_menu_callback($op, $kb_maison = NULL, $account = NULL) {
  switch ($op) {
    case 'view':
      return user_access('view maison entities', $account);

    case 'create':
      return user_access('create maison entities', $account);

    case 'update':
      return user_access('edit maison entities', $account);

    case 'delete':
      return user_access('delete maison entities', $account);
  }

  return FALSE;
}

/**
 * Maison access callback.
 */
function kb_maison_access_callback() {
  if (user_is_anonymous() && !user_access('administer maison entities')) {
    return FALSE;
  } else {
    return TRUE;
  }
}

/**
 * Implements hook_theme().
 */
function kb_maison_theme() {
  return array(
    'kb_maison_full' => array(
      'variables' => array('kb_maison' => NULL),
      'file' => 'kb_maison.theme.inc',
    ),
  );
}

/**
 * Helper function for custom queries.
 */
function kb_maison_entity_query($conditions = array()) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'kb_maison');

  // Apply conditions.
  foreach ($conditions as $key => $value) {
    $query->propertyCondition($key, $value);
  }

  $result = $query->execute();

  if (isset($result['kb_maison'])) {
    $kb_maison = array_keys($result['kb_maison']);
  } else {
    $kb_maison = array();
  }

  return $kb_maison;
}

/**
 * Saves Maison to database.
 */
function kb_maison_save(kb_maison $kb_maison) {
  return $kb_maison->save();
}

/**
 * View for /kb_maison/<idkp> page.
 */
function kb_maison_view_entity($kb_maison) {
  // Path not entity.
  $kb_maison_output = theme('kb_maison_full', array('kb_maison' => $kb_maison));
  return $kb_maison_output;
}

/**
 * Maison custom entity class.
 */
class Maison extends Entity {

  /**
   * Override defaultUri().
   */
  protected
    function defaultUri() {
    return array('path' => 'maison/' . $this->identifier());
  }

}

/**
 * Menu autoloader for /kb_maison.
 */
function kb_maison_load($idkp, $reset = FALSE) {
  $kb_maison = kb_maison_load_multiple(array($idkp), array(), $reset);
  return reset($kb_maison);
}

/**
 * Load multiple kb_maison based on certain conditions.
 */
function kb_maison_load_multiple($idkp = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('kb_maison', $idkp, $conditions, $reset);
}

/**
 * Deletes a lawmaker.
 */
function kb_maison_delete(kb_maison $kb_maison) {
  $kb_maison->delete();
}

/**
 * Delete multiple kb_maison.
 */
function kb_maison_delete_multiple(array $idkp) {
  entity_get_controller('kb_maison')->delete($idkp);
}

/**
 * Custom controller for the kb_maison entity.
 */
class MaisonController extends EntityAPIController {
  /**
   * Override the save method.
   */
//  public function save($entity, DatabaseTransaction $transaction = NULL) {
//    if (isset($entity->is_new)) {
//      $entity->created = REQUEST_TIME;
//    }
//
//    $entity->changed = REQUEST_TIME;
//    return parent::save($entity, $transaction);
//  }
}

/**
 * Custom controller for the administrator UI.
 */
class MaisonUIController extends EntityDefaultUIController {

  /**
   * Override the menu hook for default ui controller.
   */
  public
    function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['title'] = t('Maison');
    $items[$this->path]['description'] = t('Manage maison, including fields.');
    $items[$this->path]['access callback'] = 'kb_maison_access_callback';
    $items[$this->path]['access arguments'] = array('administer maison entities');
    $items[$this->path]['type'] = MENU_LOCAL_TASK;
    return $items;
  }

  /**
   * Admin form for searching and doing bulk operations.
   */
  public
    function overviewForm($form, &$form_state) {
    $form['pager'] = array('#theme' => 'pager');

    $header = array(
      'idkp' => array('data' => t('ID'), 'field' => 'idkp'),
      'name' => array('data' => t('Name'), 'field' => 'name'),
      'operations' => array('data' => t('Operations'), 'field' => 'operations'),
    );

    $options = array();
    $search_term = !empty($_GET['search']) ? $_GET['search'] : NULL;

    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'kb_maison');

    if (!empty($search_term)) {
      $query->propertyCondition('name', '%' . $search_term . '%', 'like');
    }
    // Check for sort order and sort key.
    if (!empty($_GET['sort']) && !empty($_GET['order'])) {
      $sort = strtoupper($_GET['sort']);
      $order = strtolower($_GET['order']);
      $order = str_replace(' ', '_', $order);
      if ($order != 'operations') {
        $query->propertyOrderBy($order, $sort);
      }
    }

    $query->pager(TOTAL_ITEMS_PER_PAGE);

    $result = $query->execute();
    $kb_maison_results = !empty($result['kb_maison']) ? $result['kb_maison'] : array();
    $kb_maison_array = !empty($kb_maison_results) ? kb_maison_load_multiple(array_keys($kb_maison_results)) : array();
    foreach ($kb_maison_array as $idkp => $kb_maison) {
      $options['idkp-' . $idkp] = array(
        'idkp' => l($kb_maison->idkp, 'maison/' . $kb_maison->idkp),
        'name' => l($kb_maison->name, 'maison/' . $kb_maison->idkp),
        'operations' =>
        l(t('View'), 'maison/' . $kb_maison->idkp) . ' ' .
        l(t('Edit'), ADMIN_CONTENT_MAISON_MANAGE_URI . $idkp, array('query' => array('destination' => ADMIN_CONTENT_MAISON_URI))) . ' ' .
        l(t('Delete'), ADMIN_CONTENT_MAISON_MANAGE_URI . $idkp . '/delete', array('attributes' => array('class' => array('maison-delete-' . $kb_maison->idkp),), 'query' => array('destination' => ADMIN_CONTENT_MAISON_URI))),
      );
    }

    $form['search'] = array(
      '#type' => 'fieldset',
      '#title' => t('Basic Search'),
      '#collapsible' => TRUE,
      '#collapsed' => !empty($search_term) ? FALSE : TRUE,
    );

    $form['search']['search_text'] = array(
      '#type' => 'textfield',
      '#title' => t('Search Term'),
      '#default_value' => !empty($search_term) ? $search_term : '',
    );

    $form['search']['search_submit'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
    );

    $form['bulk_operations'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bulk Operations'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['bulk_operations']['operations'] = array(
      '#type' => 'select',
      '#options' => array(
        0 => t('Select a bulk operation'),
        'delete' => t('Delete selected maison'),
      ),
    );

    $form['bulk_operations']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Submit'),
    );

    $form['entities'] = array(
      '#type' => 'tableselect',
      '#header' => $header,
      '#options' => $options,
      '#attributes' => array('class' => array('entity-sort-table')),
      '#empty' => t('There are no maison.'),
    );

    return $form;
  }

  /**
   * Form Submit method.
   */
  public
    function overviewFormSubmit($form, &$form_state) {
    $values = $form_state['input'];
    $idkp = array();

    if (!empty($values['entities'])) {
      foreach ($values['entities'] as $index => $value) {
        if (!empty($value)) {
          $idkp[] = str_replace('idkp-', '', $value);
        }
      }

      switch ($values['operations']) {
        case 'delete':
          drupal_goto('admin/content/maison/bulk/delete/' . implode('|', $idkp));
          break;
      }
    }

    if (!empty($values['search_text'])) {
      drupal_goto('admin/content/maison', array('query' => array('search' => $values['search_text'])));
    }
  }

}
