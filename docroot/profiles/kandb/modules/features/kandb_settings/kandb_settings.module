<?php

/**
 * @file
 * Code for the K&B Settings feature.
 */
include_once 'kandb_settings.features.inc';


/**
 * Implements hook_init().
 */
function kandb_settings_init() {
  drupal_add_js(
    array('kandb_settings' =>
      array(
        'selections' => array(
          'errorMessage' => 'Vous ne pouvez pas enregistrer plus de 20 items, voulez-vous gérer vos favoris ?',
          'errorRedirect' => '/' . URL_PROJET,
          'removeMessage' => 'Voulez-vous supprimer cette selection ?',
        )
      )
    ),
    'setting'
  );
}

/**
 * Implements hook_menu().
 */
function kandb_settings_menu() {
  $menu = array();
  $menu['admin/content/ketb'] = array(
    'title' => 'K&B',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'kandb_setttings_page_content',
    'access callback' => 'user_access',
    'access arguments' => array('administer K&B content'),
  );

  $menu['admin/content/ketb/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  $menu['admin/content/ketb/footer'] = array(
    'title' => 'Footer',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kandb_selection_page_footer_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer K&B content'),
  );

  $menu['admin/content/ketb/images-default'] = array(
    'title' => 'Images par défaut',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kandb_images_default'),
    'access callback' => 'user_access',
    'access arguments' => array('administer K&B content'),
  );

  $menu['admin/content/ketb/label-default'] = array(
    'title' => 'Label default',
    'description' => 'Change the Bien, Program information of block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kandb_label_default_admin'),
    'access arguments' => array('administer K&B Bien settings'),
    'type' => MENU_LOCAL_TASK,
  );
   $menu['admin/content/ketb/link-default'] = array(
      'title' => 'Link default',
      'description' => 'Change the Bien, Program information of block.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('kandb_link_default_admin'),
      'access arguments' => array('administer K&B Bien settings'),
      'type' => MENU_LOCAL_TASK,
    );
   $menu['admin/content/ketb/avant-premiere'] = array(
      'title' => 'Avant premiere',
      'description' => 'Config form',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('kandb_avant_premiere'),
      'access arguments' => array('administer K&B Bien settings'),
      'type' => MENU_LOCAL_TASK,
    );
  return $menu;
}

/**
 * Implements hook_permission().
 */
function kandb_settings_permission() {
  return array(
    'administer K&B content' => array(
      'title' => t('Administer K&B content '),
      'description' => t('Give the user the right to change specific K&B texts and image (other than node).'),
    ),
  );
}

/**
 * Page callback
 */
function kandb_setttings_page_content() {
  $parent = menu_link_get_preferred(current_path());
  $parameters = array(
    'active_trail' => array($parent['plid']),
    'only_active_trail' => FALSE,
    'min_depth' => $parent['depth'] + 1,
    'max_depth' => $parent['depth'] + 1,
    'conditions' => array('plid' => $parent['mlid']),
  );

  $children = menu_build_tree($parent['menu_name'], $parameters);
  foreach ($children as &$data) {
    if ($data['link']['link_path'] != 'admin/content/ketb/list')
      $data['link']['hidden'] = false;
  }
  $menu_render = menu_tree_output($children);

  return '<div class="content-sub-menu content-padder">' . drupal_render(menu_tree_output($children)) . '</div>';
}

/**
 * Form callback
 */
function kandb_selection_page_footer_form() {

  $form = array();

  $form['kandb_settings_social_display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display social icon'),
    '#default_value' => variable_get('kandb_settings_social_display'),
  );
  $form['kandb_settings_footer_link_face'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook'),
    '#default_value' => variable_get('kandb_settings_footer_link_face'),
  );
  $form['kandb_settings_footer_link_youtube'] = array(
    '#type' => 'textfield',
    '#title' => t('Youtube'),
    '#default_value' => variable_get('kandb_settings_footer_link_youtube'),
  );
  $form['kandb_settings_footer_link_twitter'] = array(
    '#type' => 'textfield',
    '#title' => t('Twitter'),
    '#default_value' => variable_get('kandb_settings_footer_link_twitter'),
  );
  $form['kandb_settings_footer_link_espace_collaborateur'] = array(
    '#type' => 'textfield',
    '#title' => t('Espace prescripteur'),
    '#default_value' => variable_get('kandb_settings_footer_link_espace_collaborateur'),
  );

  return system_settings_form($form);
}

/**
 * hook_form_validate()
 */
function kandb_selection_page_footer_validate($form, &$form_state) {

}

/**
 * hook_form_submit()
 */
function kandb_selection_page_footer_submit($form, &$form_state) {

}

/**
 * Implements of hook_form().
 * Render the image per default on each pieces of bien and programme gamme.
 */
function kandb_images_default() {
  $form = array();

  $field_programme_gamme = field_info_field('field_programme_gamme');
  $field_programme_gamme = $field_programme_gamme['settings']['allowed_values'];
  $count_programme_gamme = count($field_programme_gamme);

  $field_nb_pieces = field_info_field('field_nb_pieces');
  $nb_pieces_voca = taxonomy_vocabulary_machine_name_load($field_nb_pieces['settings']['allowed_values'][0]['vocabulary']);
  $nb_pieces_terms = entity_load('taxonomy_term', FALSE, array('vid' => $nb_pieces_voca->vid));
  $count_nb_pieces_terms = count($nb_pieces_terms);

  foreach ($field_programme_gamme as $tsid => $gamme) {
    foreach ($nb_pieces_terms as $term) {
      $form['image_default_' . $term->tid . '_' . $tsid] = array(
        '#type' => 'managed_file',
        '#title' => 'Image default for : ' . $term->name . ' x ' . $gamme,
        '#default_value' => variable_get('image_default_' . $term->tid . '_' . $tsid),
        '#upload_location' => 'public://',
      );
    }
  }

  $list_images = array(
    array(
      'id' => 'slider_exterieur_image',
      'title' => 'image par défault : Extérieur',
    ),
    array(
      'id' => 'slider_interieur_image',
      'title' => 'image par défault : Interieur',
    ),
    array(
      'id' => 'slider_securite_image',
      'title' => 'image par défault : Services',
    ),
    array(
      'id' => 'slider_rt2012_image',
      'title' => 'image par défault : RT2012',
    ),
    array(
      'id' => 'slider_rt2012_logo',
      'title' => 'image par défault : RT2012 logo',
    ),
    array(
      'id' => 'slider_bbc_logo',
      'title' => 'image par défault :  BBC logo',
    ),
    array(
      'id' => 'image_default_number_piece_',
      'title' => 'image par défault :  Image',
    ),
  );

  foreach ($list_images as $item) {
    $form['image_default_' . $item["id"]] = array(
      '#type' => 'managed_file',
      '#title' => $item["title"],
      '#default_value' => variable_get('image_default_' . $item["id"]),
      '#upload_location' => 'public://',
    );
  }

  // Get list term of number of pieces.
  $terms_number_of_piece = taxonomy_get_tree(9);
  foreach ($terms_number_of_piece as $term) {
    $clean_name = clean_string($term->name);
    $clean_name = explode('_', $clean_name);
    if ($clean_name AND $clean_name = $clean_name[0]) {
      $form['image_default_number_piece_' . $clean_name] = array(
        '#type' => 'managed_file',
        '#title' => 'Image par défault :' . $term->name,
        '#default_value' => variable_get('image_default_number_piece_' . $clean_name),
        '#upload_location' => 'public://',
      );
    }
  }

  $form['#field_uploads'] = $list_images;
  $form['#submit'][] = 'kandb_settings_form_update_status_managed_filed';
  return system_settings_form($form);
}

/**
 * Return the clean string in case special character.
 *
 * @param string $text
 * @return string
 */
function clean_string($text) {
  $text = str_replace(array(' ', '+'), array('_', ''), trim($text));
  $utf8 = array(
    '/[áàâãªä]/u' => 'a',
    '/[ÁÀÂÃÄ]/u' => 'A',
    '/[ÍÌÎÏ]/u' => 'I',
    '/[íìîï]/u' => 'i',
    '/[éèêë]/u' => 'e',
    '/[ÉÈÊË]/u' => 'E',
    '/[óòôõºö]/u' => 'o',
    '/[ÓÒÔÕÖ]/u' => 'O',
    '/[úùûü]/u' => 'u',
    '/[ÚÙÛÜ]/u' => 'U',
    '/ç/' => 'c',
    '/Ç/' => 'C',
    '/ñ/' => 'n',
    '/Ñ/' => 'N',
    '/–/' => '-', // UTF-8 hyphen to "normal" hyphen
    '/[’‘‹›‚]/u' => ' ', // Literally a single quote
    '/[“”«»„]/u' => ' ', // Double quote
    '/ /' => ' ', // nonbreaking space (equiv. to 0x160)
  );
  return preg_replace(array_keys($utf8), array_values($utf8), $text);
}

/**
 * Implements of hook_form_validate().
 * Save file picture on each pieces and gamme.
 */
function kandb_images_default_validate($form, &$form_state) {
  global $user;
  foreach ($form_state['values'] as $key => $value) {
    if (preg_match('/image_default_.*/i', $key) && $value) {
      // Load the file via file.fid.
      $file = file_load($value);

      // Change status to permanent.
      $file->status = FILE_STATUS_PERMANENT;

      // Save.
      file_save($file);

      // Record that the module (in this example, user module) is using the file.
      file_usage_add($file, 'user', 'user', $user->uid);
    }
  }
}

/**
 * Managed file when users upload or delete.
 */
function managed_file_upload($fid_form, $fid_variable, $module_name, $type) {
  if ($fid_form != 0 && $fid_form != $fid_variable) {
    $file = file_load($fid_form);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    file_usage_add($file, $module_name, $type, 1);
  }
  elseif ($fid_form == 0) {
    if ($fid_variable) {
      $delete_file = file_load($fid_variable);
      if ($delete_file) {
        file_usage_delete($delete_file, $module_name, $type, 1);
        $status = file_delete($delete_file);
      }
    }
  }
}

/**
 * Get value from Form and put to function managed_file_upload
 */
function kandb_settings_form_update_status_managed_filed(&$form, &$form_state) {
  $field_uploads = $form['#field_uploads'];
  foreach ($field_uploads as $field) {
    $fid_form = $form_state['values']['image_default_' . $field['id']];
    $fid_variable = variable_get('image_default_' . $field['id'], FALSE);
    $module_name = 'kandb_settings';
    managed_file_upload($fid_form, $fid_variable, $module_name, 'image_default_' . $field['id']);
  }
}

/**
 * Get value from varibale default image.
 */
function kandb_settings_get_uri_by_variable($name) {
  $file_id = variable_get($name);
  if ($file_id) {
    $file = file_load($file_id);
    if ($file && $file->uri) {
      return $file->uri;
    }
  }
  return null;
}

/**
 * Admin interface
 *
 * Called from drupal_get_form
 *
 * @return mixed
 */
function kandb_label_default_admin() {
  $form = array();

  $form['kandb_bien_default_title_habiteo'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de Bien Habiteo'),
    '#default_value' => variable_get('kandb_bien_default_title_habiteo'),
    '#required' => TRUE,
  );
  $form['kandb_bien_default_title_more'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de Bien More'),
    '#default_value' => variable_get('kandb_bien_default_title_more'),
    '#required' => TRUE,
  );
  $form['kandb_program_default_title_map'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de Program Map'),
    '#default_value' => variable_get('kandb_program_default_title_map'),
    '#required' => TRUE,
  );
  $form['kandb_program_default_subtitle_map'] = array(
    '#type' => 'textfield',
    '#title' => t('Sub Titre du bloc de Program Map'),
    '#default_value' => variable_get('kandb_program_default_subtitle_map'),
    '#required' => FALSE,
  );
  $form['kandb_program_default_title_prestations'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de Program prestations'),
    '#default_value' => variable_get('kandb_program_default_title_prestations'),
    '#required' => TRUE,
  );
  $form['kandb_program_default_subtitle_prestations'] = array(
    '#type' => 'textfield',
    '#title' => t('Sub Titre du bloc de Program prestations'),
    '#default_value' => variable_get('kandb_program_default_subtitle_prestations'),
    '#required' => FALSE,
  );
  $form['kandb_program_titre_les_plus_proches'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de Program proches'),
    '#default_value' => variable_get('kandb_program_titre_les_plus_proches'),
    '#required' => TRUE,
  );
  $form['kandb_bloc_default_offre_title_homepage'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre default offre homepage'),
    '#default_value' => variable_get('kandb_bloc_default_offre_title_homepage'),
    '#required' => TRUE,
  );
  $form['kandb_bloc_default_offre_subtitle_homepage'] = array(
    '#type' => 'textfield',
    '#title' => t('Sub Titre default offre homepage'),
    '#default_value' => variable_get('kandb_bloc_default_offre_subtitle_homepage'),
    '#required' => FALSE,
  );
  $form['kandb_bloc_espace_vente_default_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Espace vente default label'),
    '#default_value' => variable_get('kandb_bloc_espace_vente_default_label'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}
/**
 *  Get nodes content type offre
 *
 */
function get_nodes_offre() {
    $query = new EntityFieldQuery();
    $result = $query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'offre')
        ->execute();
    $nodes = node_load_multiple(array_keys($result['node']));
    return $nodes;
}
/**
 * Admin interface
 *
 * Called from drupal_get_form
 *
 * @return mixed
 */
function kandb_link_default_admin() {
    $form = array();
    $listopions = array();
    $offre = get_nodes_offre();
    $listopions[] = '...';
    foreach ($offre as $id=>$node) :
        $listopions[$id] = $node->title;
    endforeach;
    $form['kandb_progamme_link_default_selected'] = array(
      '#type' => 'select',
      '#title' => t('Choose offre'),
      '#options' => $listopions,
      '#default_value' => variable_get('kandb_progamme_link_default_selected'),
    );
    return system_settings_form($form);
}
function kandb_avant_premiere(){
     $form['avant_premiere_title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#default_value' => variable_get('avant_premiere_title'),
    );
     $form['avant_premiere_textarea'] = array(
      '#type' => 'textarea',
      '#title' => t('Description'),
      '#default_value' => variable_get('avant_premiere_textarea'),
    );
     $form['avant_premiere_textarea_bottom'] = array(
      '#type' => 'textarea',
      '#title' => t('Description bottom'),
      '#default_value' => variable_get('avant_premiere_textarea_bottom'),
    );
    return system_settings_form($form);
}