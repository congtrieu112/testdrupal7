<?php

/**
 * @file
 * Code for the K&B Domains feature.
 */
include_once 'kandb_domains.features.inc';

/**
 * Implements hook_query_TAG_alter().
 * Tag: node_access_domain.
 */
function kandb_validate_query_node_access_domain_alter(QueryAlterableInterface $query) {
  domain_alter_access_domain_query($query, 'node');
}

/**
 * Implements hook_query_TAG_alter().
 * Tag: program_access_domain.
 */
function kandb_validate_query_program_access_domain_alter(QueryAlterableInterface $query) {
  domain_alter_access_domain_query($query, 'entity', 'program');
}

/**
 * Retreive data by followings access domain.
 */
function domain_alter_access_domain_query(QueryAlterableInterface $query, $type, $alias_entity = '') {
  global $user;

  // Read meta-data from query, if provided.
  if (!$account = $query->getMetaData('account')) {
    $account = $user;
  }
  if (!$op = $query->getMetaData('op')) {
    $op = 'view';
  }

  // Only act on view.
  if ($op != 'view') {
    return;
  }

  $tables = $query->getTables();
  $base_table = $query->getMetaData('base_table');
  // If no base table is specified explicitly, search for one.
  if (!$base_table) {
    $fallback = '';
    foreach ($tables as $alias => $table_info) {
      if (!($table_info instanceof SelectQueryInterface)) {
        $table = $table_info['table'];
        // If the node table is in the query, it wins immediately.
        if ($table == 'node') {
          $base_table = $table;
          break;
        }
        // Check whether the table has a foreign key to node.nid. If it does,
        // do not run this check again as we found a base table and only node
        // can triumph that.
        if (!$base_table) {
          // The schema is cached.
          $schema = drupal_get_schema($table);
          if (isset($schema['fields']['nid'])) {
            if (isset($schema['foreign keys'])) {
              foreach ($schema['foreign keys'] as $relation) {
                if ($relation['table'] === 'node' && $relation['columns'] === array('nid' => 'nid')) {
                  $base_table = $table;
                }
              }
            }
            else {
              // At least it's a nid. A table with a field called nid is very
              // very likely to be a node.nid in a node access query.
              $fallback = $table;
            }
          }
        }
      }
    }
    // If there is nothing else, use the fallback.
    if (!$base_table) {
      if ($fallback) {
        watchdog('security', 'Your node listing query is using @fallback as a base table in a query tagged for node access. This might not be secure and might not even work. Specify foreign keys in your schema to node.nid ', array('@fallback' => $fallback), WATCHDOG_WARNING);
        $base_table = $fallback;
      }
      else {
        throw new Exception(t('Query tagged for node access but there is no nid. Add foreign keys to node.nid in schema to fix.'));
      }
    }
  }

  // Find all instances of the base table being joined -- could appear
  // more than once in the query, and could be aliased. Join each one to
  // the node_access table.
  global $_domain;
  $grant_conditions = db_and();
  if ($type == 'node') {
    foreach ($tables as $nalias => $tableinfo) {
      $table = $tableinfo['table'];
      if (!($table instanceof SelectQueryInterface) && $table == $base_table) {
        $subquery = db_select('node_access', 'na')
            ->fields('na', array('nid'));
        $grant_conditions->condition(db_and()
                ->condition('na.gid', $_domain['domain_id'])
                ->condition('na.realm', 'domain_id')
        );

        // Attach conditions to the subquery for nodes.
        if (count($grant_conditions->conditions())) {
          $subquery->condition($grant_conditions);
        }

        $field = 'nid';
        $subquery->where("$nalias.$field = na.nid");
        $query->exists($subquery);
      }
    }
  }
  elseif ($type == 'entity' && $alias_entity) {
    $subquery = db_select('node_access', 'na')
        ->fields('na', array('nid'));
    $grant_conditions->condition(db_and()
            ->condition('na.gid', $_domain['domain_id'])
            ->condition('na.realm', 'domain_id')
    );

    // Attach conditions to the subquery for nodes.
    if (count($grant_conditions->conditions())) {
      $subquery->condition($grant_conditions);
    }

    $field = 'entity_id';
    $subquery->where("$alias_entity.$field = na.nid");
    $query->exists($subquery);
  }
}
