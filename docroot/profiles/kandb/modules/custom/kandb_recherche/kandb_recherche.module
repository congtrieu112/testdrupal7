<?php

/**
 * URL Search
 */
define('URL_SEARCH_B2C', 'recherche');
define('URL_SEARCH_B2B', 'recherche_pro');

/**
 * @file
 * Code for the K&B Recherche feature.
 */
include_once 'kandb_recherche.features.inc';

/**
 * Implements hook_menu().
 */
function kandb_recherche_menu() {
  $menu[URL_SEARCH_B2C] = array(
    'title' => 'Page de recherche B2C',
    'page callback' => 'kandb_recherche_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $menu[URL_SEARCH_B2B] = array(
    'title' => 'Page de recherche B2B',
    'page callback' => 'kandb_recherche_pro_page',
    'access arguments' => array('access B2B search'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $menu;
}

/**
 * Implements hook_permission()
 */
function hook_permission() {
  return array(
    'access B2B search' => array(
      'title' => t('Access B2B search'),
      'description' => t('Allow a user to use the B2B search.'),
    ),
  );
}

/**
 * Page Callback
 */
function kandb_recherche_page(){

  // Search form
  $block_form = module_invoke('kandb_recherche', 'block_view', 'recherche_complete_b2c');
  $block_form = $block_form['content'];

  $result = NULL;
  $vocabularies = taxonomy_vocabulary_get_names();

  // Result
  if(isset($_GET['place']) && !empty($_GET['place'])){

    // Check if the search localisation exists in our BDD
    $location = $_GET['place'];
    $arrondissement = kandb_recherche_arrondissement($location);
    $ville = kandb_recherche_taxonomy_term($location, $vocabularies['ville']->vid);
    $postal_code = kandb_recherche_programme_by_field(array('field_programme_loc_cp' => $location));
    $departement = kandb_recherche_taxonomy_term($location, $vocabularies['departement']->vid);
    $code_departement = kandb_recherche_taxonomy_term_by_field_value(array('field_numero_departement' => $location,));
    $region = kandb_recherche_taxonomy_term($location, $vocabularies['region']->vid);
    $programme = kandb_recherche_programme_by_field(array('title' => $location));

    // If the user search catch a ville, a departement,
    // a region or a programme, launch the search
    if(!empty($arrondissement) ||!empty($ville) || !empty($postal_code) || !empty($departement) || !empty($code_departement) || !empty($region) || !empty($programme)) {
      if(isset($_GET['bien']) && $_GET['bien'] == 1) {
        $result = views_embed_view('solr_views', 'page');
      }else{
        $result = views_embed_view('solr_views', 'page_1');
      }

    // Otherwise we propose some new result
    }else{
      // Check if the search localisation exists in our BDD (starting by)
      $location = $_GET['place'];
      $ville = kandb_recherche_taxonomy_term($location, $vocabularies['ville']->vid, TRUE);
      $postal_code = kandb_recherche_programme_by_field(array('field_programme_loc_cp' => $location), TRUE);
      $departement = kandb_recherche_taxonomy_term($location, $vocabularies['departement']->vid, TRUE);
      $code_departement = kandb_recherche_taxonomy_term_by_field_value(array('field_numero_departement' => $location,));
      $region = kandb_recherche_taxonomy_term($location, $vocabularies['region']->vid, TRUE);
      $programme = kandb_recherche_programme_by_field(array('title' => $location), TRUE);

      // If there is ville, departement, region or
      // programme starting with the search, propose
      // a list with all the possibility
      if(!empty($ville) || !empty($postal_code) || !empty($departement) || !empty($code_departement) || !empty($region) || !empty($programme)) {
        $return = array();

        // Ville
        $return['ville'] = array();
        foreach($ville as $id => $term_object){
          $return['ville'][$id] = array(
            'link' => kandb_recherche_get_action_url() . '?place=' . $term_object->name,
            'name' => ucfirst(strtolower($term_object->name)),
          );
        }

        // Departement
        $return['departement'] = array();
        foreach($departement as $id => $term_object){
          $return['departement'][$id] = array(
            'link' => kandb_recherche_get_action_url() . '?place=' . $term_object->name,
            'name' => $term_object->name,
          );
        }

        // Region
        $return['region'] = array();
        foreach($region as $id => $term_object){
          $return['region'][$id] = array(
            'link' => kandb_recherche_get_action_url() . '?place=' . $term_object->name,
            'name' => $term_object->name,
          );
        }

        // Programme
        $return['programme'] = array();
        foreach($programme as $id => $prog){
          $return['programme'][$id] = array(
            'link' => kandb_recherche_get_action_url() . '?place=' . $prog->title,
            'name' => $prog->title,
          );
        }

        $result = theme('result_beginning_with', array(
          'ville' => $return['ville'],
          'departement' => $return['departement'],
          'region' => $return['region'],
          'programme' => $return['programme'],
        ));

      // Otherwise list all departement
      }
    }
  }

  // If not result
  if ($result == NULL) {
    $tree = taxonomy_get_tree($vocabularies['departement']->vid);
    $departement = array();
    foreach ($tree as $id => $term) {
      $departement[$id] = array(
        'link' => kandb_recherche_get_action_url() . '?place=' . $term->name,
        'name' => $term->name,
      );
    }
    $result = theme('result_departement', array('departement' => $departement));
  }

  return theme('recherche', array(
    'block_form' => $block_form,
    'result' => $result,
  ));
}

/**
 * Implements hook_block_info().
 */
function kandb_recherche_block_info() {
  $blocks = array();

  $blocks['recherche_minimal'] = array(
    'info' => t('Recherche minimal'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
  );

  $blocks['recherche_simple'] = array(
    'info' => t('Recherche simple'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
  );

  $blocks['recherche_complete_b2c'] = array(
    'info' => t('Recherche complète B2C'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
  );

  $blocks['recherche_complete_b2b'] = array(
    'info' => t('Recherche complète B2B'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
  );

  $blocks['recherche_result_b2c'] = array(
    'info' => t('Recherche complète B2B'),
    'cache' => DRUPAL_NO_CACHE,
    'status' => 0,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function kandb_recherche_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'recherche_minimal':
      $block['subject'] = '';
      $block['content'] = theme('recherche_minimal', array('form' => drupal_get_form('recherche_minimal_form')));
      break;
    case 'recherche_simple':
      $block['subject'] = '';
      $block['content'] = theme('recherche_simple', array('form' => drupal_get_form('recherche_simple_form')));
      break;
    case 'recherche_complete_b2c':
      $block['subject'] = '';
      $block['content'] = theme('recherche_complete_b2c', array('form' => drupal_get_form('recherche_complete_b2c_form')));
      break;
    case 'recherche_complete_b2b':
      $block['subject'] = '';
      $block['content'] = theme('recherche_complete_b2b', array());
      break;
    case 'recherche_result_b2c':
      $block['subject'] = '';
      $block['content'] = '';
  }

  return $block;
}

/**
 * Implements of hook_theme().
 */
function kandb_recherche_theme($existing, $type, $theme, $path) {
  return array(
    // SEARCH RESULT
    'recherche' => array(
      'template' => 'templates/recherche/recherche',
      'variables' => array(),
    ),
    'result_departement' => array(
      'template' => 'templates/recherche/result/result_departement',
    ),
    'result_beginning_with' => array(
      'template' => 'templates/recherche/result/result_beginning_with',
    ),

    // SEARCH FORMS
    'recherche_minimal' => array(
      'template' => 'templates/recherche/recherche_minimal',
      'variables' => array('form' => NULL),
    ),
    'recherche_simple' => array(
      'template' => 'templates/recherche/recherche_simple',
      'variables' => array('form' => NULL),
    ),
    'recherche_complete_b2c' => array(
      'template' => 'templates/recherche/recherche_complete_b2c',
      'variables' => array('form' => NULL),
    ),
    'recherche_complete_b2b' => array(
      'template' => 'templates/recherche/recherche_complete_b2b',
      'variables' => array(),
    ),
    'recherche_check_box' => array(
      'render element' => 'element',
    ),
    'recherche_check_box_item' => array(
      'render element' => 'element',
    ),
    'recherche_button' => array(
      'render element' => 'element',
    ),

  );
}

/**
 * Create form 'Recherche Minimal'
 * @param type $form
 * @param type $form_state
 * @return string
 */
function recherche_minimal_form($form, &$form_state) {
  $form['place'] = array(
    '#type' => 'textfield',
    '#attributes' => array('required' => 'required', 'placeholder' => array('Ville, département ou programme'), 'class' => array('input__search'), 'pattern' => '(.){2,}$'),
    '#theme_wrappers' => array(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Rechercher'),
    '#theme_wrappers' => array(),
    '#attributes' => array('class' => array('btn-icon')),
    '#theme' => 'recherche_button'
  );

  $form['#method'] = 'get';
  $form['#action'] = kandb_recherche_get_action_url();
  $form['#theme'] = array('recherche_minimal');

  return $form;
}

/**
 * Implements hook_form_validate()
 * @param type $form
 * @param type $form_state
 */
function recherche_minimal_form_validate($form, &$form_state) {

}

/**
 * Implements hook_form_submit()
 * @param type $form
 * @param type $form_state
 */
function recherche_minimal_form_submit() {

}

/**
 * Create form 'Recherche Simple'
 * @param type $form
 * @param type $form_state
 * @return string
 */
function recherche_simple_form($form, &$form_state) {
  $form['place'] = array(
    '#type' => 'textfield',
    '#attributes' => array('required' => 'required', 'placeholder' => array('Ville, département ou programme'), 'class' => array('input__search'), 'pattern' => '(.){2,}$'),
    '#theme_wrappers' => array(),
  );

  $taxonomy = taxonomy_vocabulary_machine_name_load('type_de_bien');
  $terms = taxonomy_get_tree($taxonomy->vid);
  $form_terms = array();
  foreach($terms as $term_object){
    $form_terms[$term_object->tid] = $term_object->name;
  }
  $form['field_type'] = array(
    '#type' => 'checkboxes',
    '#options' => $form_terms,
    '#theme_wrappers' => array(),
    '#theme' => 'recherche_check_box'
  );

  $form['prix_min'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#attributes' => array('placeholder' => array('Min'), 'class' => array('input__text small-padding text-center')),
    '#theme_wrappers' => array(),
  );

  $form['prix_max'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#attributes' => array('placeholder' => array('Max'), 'class' => array('input__text small-padding text-center')),
    '#theme_wrappers' => array(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Rechercher'),
    '#theme_wrappers' => array(),
    '#attributes' => array('class' => array('btn-icon')),
    '#theme' => 'recherche_button'
  );

  $form['#method'] = 'get';
  $form['#action'] = kandb_recherche_get_action_url();
  $form['#theme'] = array('recherche_simple');

  return $form;
}

/**
 * Implements hook_form_validate()
 */
function recherche_simple_form_validate(&$form, &$form_state) {

}

/**
 * Implements hook_form_submit()
 */
function recherche_simple_form_submit() {

}

/**
 * Implements hook_form()
 * Create form 'Recherche Complete B2C'
 */
function recherche_complete_b2c_form($form, &$form_state) {
  $form['place'] = array(
    '#type' => 'textfield',
    '#attributes' => array('required' => 'required', 'placeholder' => array('Ville, département ou programme'), 'class' => array('input__search'), 'pattern' => '(.){2,}$'),
    '#theme_wrappers' => array(),
    '#default_value' => isset($_GET['place']) ? $_GET['place'] : NULL,
  );

  $taxonomy = taxonomy_vocabulary_machine_name_load('type_de_bien');
  $terms = taxonomy_get_tree($taxonomy->vid);
  $form_terms = array();
  foreach($terms as $term_object){
    $form_terms[$term_object->tid] = $term_object->name;
  }
  $form['field_type'] = array(
    '#type' => 'checkboxes',
    '#options' => $form_terms,
    '#theme_wrappers' => array(),
    '#theme' => 'recherche_check_box',
    // For selection purpose
    '#taxonomy' => TRUE,
  );

  $form['prix_min'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#attributes' => array('placeholder' => array('Min'), 'class' => array('input__text small-padding text-center')),
    '#default_value' => isset($_GET['prix_min']) ? $_GET['prix_min'] : NULL,
    '#theme_wrappers' => array(),
  );

  $form['prix_max'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#attributes' => array('placeholder' => array('Max'), 'class' => array('input__text small-padding text-center')),
    '#default_value' => isset($_GET['prix_max']) ? $_GET['prix_max'] : NULL,
    '#theme_wrappers' => array(),
  );

  $taxonomy = taxonomy_vocabulary_machine_name_load('nb_pieces');
  $terms = taxonomy_get_tree($taxonomy->vid);
  $form_terms = array();
  foreach($terms as $term_object){
    $form_terms[$term_object->tid] = $term_object->name;
  }
  $form['field_nb_pieces'] = array(
    '#type' => 'checkboxes',
    '#options' => $form_terms,
    '#theme_wrappers' => array(),
    '#theme' => 'recherche_check_box',
    // For selection purpose
    '#taxonomy' => TRUE,
  );

  $form['field_superficie'] = array(
    '#type' => 'textfield',
    '#size' => 1,
    '#attributes' => array('placeholder' => array('Min')),
    '#default_value' => isset($_GET['field_superficie']) ? $_GET['field_superficie'] : NULL,
    '#theme_wrappers' => array(),
  );

  $taxonomy = taxonomy_vocabulary_machine_name_load('caracteristiques');
  $terms = taxonomy_get_tree($taxonomy->vid);
  $form_terms = array();
  foreach($terms as $term_object){
    $form_terms[$term_object->tid] = $term_object->name;
  }
  $form['field_caracteristique'] = array(
    '#type' => 'checkboxes',
    '#options' => $form_terms,
    '#theme_wrappers' => array(),
    '#theme' => 'recherche_check_box',
    // For selection purpose
    '#taxonomy' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Rechercher'),
    '#theme_wrappers' => array(),
    '#attributes' => array('class' => array('btn-icon')),
    '#theme' => 'recherche_button'
  );

  $bien_or_programme = 'programme';
  if(isset($_GET['bien']) && $_GET['bien'] == 1) $bien_or_programme = 'bien';
  $form[$bien_or_programme] = array(
    '#type' => 'hidden',
    '#value' => 1,
  );

  $form['#method'] = 'get';
  $form['#action'] = kandb_recherche_get_action_url();
  $form['#theme'] = array('recherche_complete_b2c');

  return $form;
}

/**
 * Implements hook_form_validate()
 * @param type $form
 * @param type $form_state
 */
function recherche_complete_b2c_form_validate(&$form, &$form_state) {

}

/**
 * Implements hook_form_submit()
 * @param type $form
 * @param type $form_state
 */
function recherche_complete_b2c_form_submit() {

}

/**
 * Custom theme of checkboxes for the gender field.
 */
function theme_recherche_check_box($variables) {
  $element = $variables['element'];
  $options = array_keys($element['#options']);
  $output = '';

  $totalOptions = count($options);
  $count = 1;
  foreach ($options as $option) {
    $element[$option]['#class'] = 'class="bordered"';
    if ($count == $totalOptions) {
      $element[$option]['#class'] = '';
    }
    if (isset($_GET[$element['#name']])) {
      foreach($_GET[$element['#name']] as $id){
        if(isset($element[$id])){
          $element[$id]['#attributes']['checked'] = 'checked';
        }
      }
    }

    $element[$option]['#name'] = $element['#name'];
    $output .= theme('recherche_check_box_item', $element[$option]);
    $count++;
  }

  return $output;
}

/**
 * Custom theme of checkboxes for the gender field.
 */
function theme_recherche_check_box_item($variables) {
  $element = $variables['element'];
  $element['#attributes']['class'] = array('input-checkbox');

  $attributes = array('#return_value' => 'value', 'id', 'type');
  element_set_attributes($element, $attributes);

  $output = '<li ' . $element['#class'] . '>'
    . '<input name="' . $element['#name'] . '[]" ' . drupal_attributes($element['#attributes']) . '/>'
    . '<label class="label-checkbox" for="' . $element['#id'] . '"><span>' . $element['#title'] . '</span></label>'
    . '</li>';

  return $output;
}

/**
 * Override of theme_button().
 *
 * Render the button element as a button and the submit element as an input element.
 */
function theme_recherche_button($variables) {
  $element = $variables['element'];
  $element['#attributes']['type'] = 'submit';

  element_set_attributes($element, array('id', 'name', 'value'));

  if (!empty($element['#attributes']['disabled'])) {
    $element['#attributes']['class'][] = 'form-button-disabled';
  }

  $value = $element['#value'];
  unset($element['#attributes']['value']);

  return '<button value="' . $value . '"' . drupal_attributes($element['#attributes']) . '><span class="button__content"><span class="icon icon-search"></span>' . $value . '</span></button>';
}

/**
 * Get action url depending of the domain
 */
function kandb_recherche_get_action_url(){
  $domain = domain_get_domain();
  $action = '/';
  if($domain['machine_name'] == 'kandb_b2b'){
    $action .= URL_SEARCH_B2B;
  }else{
    $action .= URL_SEARCH_B2C;
  }
  return $action;
}

/**
 * Search a term in a taxonomy
 *
 * @param string $term_name
 *   A taxonomy term name
 * @param int $vid
 *   A vocabulary id. False to not search in a particular vocabulary
 * @param bool $begin_with
 *   Should we return all taxonomy term which have exactly
 *   the term name (false) or all taxonomy term beginning
 *   by the taxonomy term (true)
 *
 * @return array $terms
 *   Returns an array of terms that match the search
 */
function kandb_recherche_taxonomy_term($term_name, $vid = NULL, $begin_with = false) {
  // Static storage
  static $taxonomy_term_storage = array();
  $taxonomy_term_storage_key = $term_name.'_'.$vid.'_'.($begin_with ? 'true' : 'false');
  if(isset($taxonomy_term_storage[$taxonomy_term_storage_key])) return $taxonomy_term_storage[$taxonomy_term_storage_key];

  // Query
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');

  // Term name condition
  if($begin_with) $term_name = $term_name.'%';
  $query->propertyCondition('name', $term_name, 'LIKE');

  // Vocabulary
  if($vid != NULL) $query->propertyCondition('vid', $vid);

  // Return result
  $result = $query->execute();

  // Load terms
  $terms = array();
  if(isset($result['taxonomy_term'])) {
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
  }

  $taxonomy_term_storage[$taxonomy_term_storage_key] = $terms;
  return $terms;
}

/**
 * Search a term in a taxonomy by a field value
 *
 * @param array $field_values
 *   An array of field_name => field_value
 * @param int $vid
 *   A vocabulary id. False to not search in a particular vocabulary
 * @param bool $begin_with
 *   Should we return all taxonomy ids which have exactly
 *   the field values (false) or all taxonomy ids beginning
 *   by the field values (true)
 *
 * @return array $terms
 *   Returns an array of terms that match the search
 */
function kandb_recherche_taxonomy_term_by_field_value($field_values, $vid = NULL, $begin_with = false) {
  // Static storage
  static $taxonomy_term_by_field_value = array();
  $taxonomy_term_by_field_value_key = '';
  foreach($field_values as $key => $value){
    $taxonomy_term_by_field_value_key .= $key.'_'.$value.'_';
  }
  $taxonomy_term_by_field_value_key .= $vid.'_'.($begin_with ? 'true' : 'false');
  if(isset($taxonomy_term_by_field_value[$taxonomy_term_by_field_value_key])) return $taxonomy_term_by_field_value[$taxonomy_term_by_field_value_key];

  // Query
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'taxonomy_term');

  // Term name condition
  foreach($field_values as $key => $value){
    $query->fieldCondition($key, 'value', $value . ($begin_with ? '%' : ''), 'LIKE');
  }

  // Vocabulary
  if($vid != NULL) $query->propertyCondition('vid', $vid);

  // Return result
  $result = $query->execute();

  // Load terms
  $terms = array();
  if(isset($result['taxonomy_term'])) {
    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));
  }

  $taxonomy_term_by_field_value[$taxonomy_term_by_field_value_key] = $terms;
  return $terms;
}

/**
 * Search a programme available or not
 *
 * @param array $field_values
 *    An array of field_name => field_value
 * @param bool $begin_with
 *   Should we search for the exact title or
 *   all title beginning by the given title
 * @param bool $available
 *   Should we search only "available" programme
 *
 * @return array $terms
 *   Returns an array of programme that match the search
 */
function kandb_recherche_programme_by_field($field_values, $begin_with = false, $available = true) {
  // Static storage
  static $programme_by_field = array();
  $programme_by_field_key = '';
  foreach($field_values as $field => $value){
    $programme_by_field_key .= $field . '_' . $value . '_';
  }
  $programme_by_field_key .= ($begin_with ? 'true' : 'false').'_'.($available ? 'true' : 'false');
  if(isset($programme_by_field[$programme_by_field_key])) return $programme_by_field[$programme_by_field_key];

  // Query
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'programme');

  // Available
  if($available) {
    $query->propertyCondition('status', 1);
    $query->fieldCondition('field_programme_statut', 'value', '1');
  }

  // Field values
  foreach($field_values as $field => $value) {
    if($field == 'title'){
      $query->propertyCondition('title', $value . ($begin_with ? '%' : ''), 'LIKE');
    }else{
      $query->fieldCondition($field, 'value', $value . ($begin_with ? '%' : ''), 'LIKE');
    }
  }

  // Return result
  $result = $query->execute();

  // Load terms
  $entities = array();
  if(!empty($result)) {
    $entities = entity_load('node', array_keys($result['node']));
  }

  $programme_by_field[$programme_by_field_key] = $entities;
  return $entities;
}

/**
 * Implements hook_form_alter().
 */
function kandb_recherche_form_alter(&$form, &$form_state, $form_id) {
  if($form_id != 'views_exposed_form') return;
  if(!isset($_GET['place']) || empty($_GET['place'])) return;

  $vocabularies = taxonomy_vocabulary_get_names();

  // Localisation
  // Check if the search localisation exists in our BDD
  $location = $_GET['place'];
  $ville = kandb_recherche_taxonomy_term($location, $vocabularies['ville']->vid);
  $arrondissement = kandb_recherche_arrondissement($location);
  $postal_code = kandb_recherche_programme_by_field(array('field_programme_loc_cp' => $location));
  $departement = kandb_recherche_taxonomy_term($location, $vocabularies['departement']->vid);
  $code_departement = kandb_recherche_taxonomy_term_by_field_value(array('field_numero_departement' => $location,));
  $region = kandb_recherche_taxonomy_term($location, $vocabularies['region']->vid);
  $programme = kandb_recherche_programme_by_field(array('title' => $location));

  if(!empty($arrondissement)){
    $form_state['input']['field_programme_field_programme_loc_ville'] = $arrondissement['ville'];
    $form_state['input']['field_programme_field_programme_loc_arr'] = $arrondissement['arrondissement'];
  }
  if(!empty($ville)) $form_state['input']['field_programme_field_programme_loc_ville'] = key($ville);
  if(!empty($postal_code)) $form_state['input']['field_programme_field_programme_loc_cp'] = $location;
  if(!empty($departement)) $form_state['input']['field_programme_field_programme_loc_department'] = key($departement);
  if(!empty($code_departement)) $form_state['input']['field_programme_field_programme_loc_department'] = key($code_departement);
  if(!empty($region)) $form_state['input']['field_programme_field_programme_loc_region']['value'] = key($region);
  if(!empty($programme)) $form_state['input']['field_programme_title'] = $location;

  // Price prix_min prix_max
  if (isset($_GET['prix_min']) && !empty($_GET['prix_min'])) {
    $form_state['input']['field_prix_tva_20'] = $_GET['prix_min'];
    $form_state['input']['field_bien_low_tva_price'] = $_GET['prix_min'];
  }
  if (isset($_GET['prix_max']) && !empty($_GET['prix_max'])) {
    $form_state['input']['field_prix_tva_20_1'] = $_GET['prix_max'];
    $form_state['input']['field_bien_low_tva_price_1'] = $_GET['prix_max'];
  }
}

/**
 * Search for an arrondissement
 *
 * @param $location
 *  The user search
 *
 * @return array $return
 *  An array of all arrondissement found
 */
function kandb_recherche_arrondissement($location){
  if(!isset($location) || empty($location)) return FALSE;

  // Stock already search in static for performance
  static $arrondissement_storage = array();
  if(isset($arrondissement_storage[$location])) return $arrondissement_storage[$location];

  $vocabularies = taxonomy_vocabulary_get_names();

  // Get all the citites that have arrondissement
  $query = db_select('taxonomy_term_data', 'ttd')
            ->fields('ttd', array('name', 'tid'))
            ->condition('ttd.vid', $vocabularies['ville']->vid);

  $query->join('field_data_field_idk', 'fdfi', 'fdfi.entity_id = ttd.tid');
  $query->join('field_data_field_idk', 'fdfi2', 'fdfi.field_idk_value = fdfi2.field_idk_value AND fdfi2.bundle = \'arrondissement\'');
  $query->join('taxonomy_term_data', 'ttd2', 'fdfi2.entity_id = ttd2.tid');
  $query->fields('ttd2', array('name', 'tid'));

  $query->orderby('ttd2.tid', 'desc');

  $result = $query->execute();

  while($record = $result->fetchAssoc()) {
    if(stristr($location, $record['name'])){
      if(preg_match('#([0-9]{1,3})(.*)#', $record['ttd2_name'], $matches)) {
        $arrondissement = $matches[1];
        if(strstr($_GET['place'], $arrondissement)) {
          $return = array('ville' => $record['tid'], 'arrondissement' => $record['ttd2_tid']);
          $arrondissement_storage[$location] = $return;
          return $return;
        }
      }
    }
  }

  $arrondissement_storage[$location] = FALSE;
  return FALSE;
}


/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function kandb_recherche_preprocess_views_view_unformatted(&$vars) {
  if ($vars['view']->name == 'solr_views') {

    // Link to search Programme or Bien
    $vars['link_search_programme'] = kandb_recherche_build_search_link(URL_SEARCH_B2C, 'programme');
    $vars['link_search_bien'] = kandb_recherche_build_search_link(URL_SEARCH_B2C, 'bien');

    // All results
    $rows = &$vars['view']->style_plugin->rendered_fields;

    // Get all result IDs
    $ids_bien = array();
    $ids_programme = array();
    foreach ($rows as $id => $row) {
      $ids_bien[] = $row['nid'];
      $ids_programme[] = $row['field_programme_nid'];
    }
    if(empty($ids_bien) && empty($ids_programme)) return;
    $ids_programme = array_unique($ids_programme);

    // Get the Promotions associated to these IDs
    // And the image style image
    $promotions = kandb_recherche_get_promotion_from_ids($ids_bien, 'bien');
    $image_styles = kandb_recherche_get_images_from_ids($ids_programme, array('field_image_principale'), array('search_small', 'search_medium'));

    // Add Promotion information to each row
    $last_id_programme = 0;
    foreach ($rows as $id => &$row) {
      $id_bien = $row['nid'];
      $id_programme = $row['field_programme_nid'];

      $row['promotions'] = array();
      foreach($promotions as $id_promo => $promotion) {
        foreach($promotion->field_promotion_biens[LANGUAGE_NONE] as $id2 => $array) {
          if ($id_bien == $array['target_id']) {
            $row['promotions'][] = $promotion;
          }
        }
      }

      if($last_id_programme != $id_programme && isset($image_styles[$id_programme])){
        $row = array_merge($row, $image_styles[$id_programme]);
        $last_id_programme = $id_programme;
      }
    }
  }
}

/**
 * Get Promotion from Bien or Programme ID
 *
 * @param $ids
 *  An array of Bien or Programme IDs
 * @param string $type
 *  Should we search for Bien or Programme
 *
 * @return array
 *  Return an Array of Promotion found
 */
function kandb_recherche_get_promotion_from_ids($ids, $type = 'bien'){
  // Query
  $query = new EntityFieldQuery;
  $query->entityCondition('entity_type', 'node');
  $query->entityCondition('bundle', 'promotion');

  // Available
  $query->propertyCondition('status', 1);

  // Field values
  if($type == 'bien'){
    $query->fieldCondition('field_promotion_biens', 'target_id', $ids, 'IN');
  }else{
    $query->fieldCondition('field_promotion_programme', 'target_id', $ids, 'IN');
  }

  // Date
  $query->fieldCondition('field_promotion_start', 'value', date("Y-m-d H:i:s"), '<=');
  $query->fieldCondition('field_promotion_stop', 'value', date("Y-m-d H:i:s"), '>=');

  // Return result
  $result = $query->execute();

  // Load terms
  $entities = array();
  if(!empty($result)) {
    $entities = entity_load('node', array_keys($result['node']));
  }

  return $entities;
}

/**
 * Return the image url and image style url for node in $id
 *
 * @param array $ids
 *  An array of node id
 * @param array $image_field
 *  An array of image field
 * @param array $image_styles
 *  An array of image styles
 *
 * @return array
 *  Return an array of image and image styles keyed by entity id
 */
function kandb_recherche_get_images_from_ids($ids, $image_fields = array(), $image_styles = array()){

  // Load nodes
  $entities = entity_load('node', $ids);

  $return = array();
  foreach($entities as $id_entity => &$entity){
    foreach($image_fields as $field){
      if (isset($entity->$field)){
        $return[$entity->nid][$field] = $entity->{$field}[LANGUAGE_NONE][0]['uri'];
        foreach($image_styles as $image_style){
          $return[$entity->nid][$image_style] = image_style_url($image_style, $entity->{$field}[LANGUAGE_NONE][0]['uri']);
        }
      }
    }
  }

  return $return;
}

/**
 * Build a new link with new parameters
 *
 * @param string $search_url
 *  Link to a B2C or B2B search ?
 * @param string $type_of_search
 *  Type of search : bien or programme
 * @param array $new_params
 *  An array of parameters
 * @param array
 *
 * @retur string $url
 *  Return a search url
 */
function kandb_recherche_build_search_link($search_url, $type_of_search = 'programme', $new_params = array()){
  global $base_url;

  $allowed_types_of_search = array(
    'bien',
    'programme',
  );

  $search_criteria = array(
    'place',
    'field_type',
    'prix_min',
    'prix_max',
    'field_nb_pieces',
    'field_superficie',
    'field_caracteristique',
  );

  // Base search url
  $url = $base_url . '/' . $search_url;

  // Params
  $params = array();

  // Type of search
  if(!empty($type_of_search) && in_array($type_of_search, $allowed_types_of_search)) {
    $params[$type_of_search] = 1;
  }

  // Get all criteria
  foreach($search_criteria as $criteria){
    if(isset($_GET[$criteria]) && !empty($_GET[$criteria])){
      $params[$criteria] = $_GET[$criteria];
    }
  }

  // New params
  $params = array_merge($params, $new_params);

  // Merge url with params
  if(!empty($params)){
    $url .= '?' . http_build_query($params);
  }

  return $url;
}

/**
 * Implements hook_entity_property_info_alter().
 *
 * Adds an entity property for the domain access of the node.
 */
function kandb_recherche_entity_property_info_alter(&$info) {
  $properties = &$info['node']['properties'];
  $properties['kandb_recherche_domain_access'] = array(
    'label' => t('My Domain Access Information'),
    'description' => t('The domains to which the node is published.'),
    'type' => 'list<integer>',
    'getter callback' => 'kandb_recherche_get_domain_info',
  );
  $properties['title_sort'] = array(
    'type' => 'text',
    'label' => t('Title for sorting'),
    'sanitized' => TRUE,
    'getter callback' => 'kandb_recherche_get_title_sorting_info',
  );
  $properties['bien_type_sort'] = array(
    'type' => 'text',
    'label' => t('Type of Bien for sorting'),
    'sanitized' => TRUE,
    'getter callback' => 'kandb_recherche_get_type_sorting_info',
  );
  $properties['departement_number'] = array(
    'type' => 'text',
    'label' => t('Number of the department'),
    'sanitized' => TRUE,
    'getter callback' => 'kandb_recherche_get_department_number',
  );
  $properties['ville_text'] = array(
    'type' => 'text',
    'label' => t('Town Name'),
    'sanitized' => TRUE,
    'getter callback' => 'kandb_recherche_get_ville_text',
  );
  $properties['room_sort'] = array(
    'type' => 'text',
    'label' => t('Number room for sorting'),
    'sanitized' => TRUE,
    'getter callback' => 'kandb_recherche_get_number_room_sorting_info',
  );
}

/**
 * Custom getter callback for the domains in
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_domain_info($data, array $options, $name, $type, $info) {
  return (!empty($data->domains) ? $data->domains : NULL);
}

/**
 * Custom getter callback for the sorting title in
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_title_sorting_info($data, array $options, $name, $type, $info) {
  return (!empty($data->title) ? $data->title : NULL);
}

/**
 * Custom getter callback for the department number in
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_department_number($data, array $options, $name, $type, $info) {
  $num = NULL;
  if(isset($data->field_programme_loc_department['und'][0]['tid']) && !empty($data->field_programme_loc_department['und'][0]['tid'])) {
    $tid = $data->field_programme_loc_department['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    if (isset($term->field_numero_departement['und'][0]['value']) && !empty($term->field_numero_departement['und'][0]['value'])) {
      $num = $term->field_numero_departement['und'][0]['value'];
    }
  }
  return $num;
}

/**
 * Custom getter callback for the ville sort in
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_ville_text($data, array $options, $name, $type, $info) {
  $term_name = NULL;
  if(isset($data->field_programme_loc_ville['und'][0]['tid']) && !empty($data->field_programme_loc_ville['und'][0]['tid'])) {
    $tid = $data->field_programme_loc_ville['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    if (isset($term->name) && !empty($term->name)) {
      $term_name = $term->name;
    }
  }
  return $term_name;
}

/**
 * Custom getter callback for the type of Bien sorting
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_type_sorting_info($data, array $options, $name, $type, $info) {
  $weight = NULL;
  if(isset($data->field_type['und'][0]['tid']) && !empty($data->field_type['und'][0]['tid'])) {
    $tid = $data->field_type['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    if (isset($term->weight)) {
      $weight = $term->weight;
    }
  }
  return $weight;
}

/**
 * Custom getter callback for the number of room for sorting
 *
 * @param $data
 * @param array $options
 * @param $name
 * @param $type
 * @param $info
 * @return null
 */
function kandb_recherche_get_number_room_sorting_info($data, array $options, $name, $type, $info) {
  $number = NULL;
  if(isset($data->field_nb_pieces['und'][0]['tid']) && !empty($data->field_nb_pieces['und'][0]['tid'])) {
    $tid = $data->field_nb_pieces['und'][0]['tid'];
    $term = taxonomy_term_load($tid);
    if (isset($term->weight)) {
      $number = $term->weight;
    }
  }
  return $number;
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Adds a filter for the current domain.
 */
function kandb_recherche_search_api_query_alter(SearchApiQueryInterface $query) {
  $domain = domain_get_domain();
  $query->condition('kandb_recherche_domain_access', $domain['domain_id']);
  $query->condition('field_programme:kandb_recherche_domain_access', $domain['domain_id']);
}