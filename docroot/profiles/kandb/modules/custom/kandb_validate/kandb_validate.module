<?php

/**
 * Implement hook_form_Form_ID_alter().
 */
function kandb_validate_form_avant_premiere_node_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'kandb_validate_avant_premiere';
}

/**
 * Custom validate start date and end date for avant_premiere ct.
 */
function kandb_validate_avant_premiere(&$form, &$form_state) {
  $input_val = $form_state['input'];
  $start_date = $input_val['field_avant_premiere_date_debut'][LANGUAGE_NONE][0]['value'];
  $end_date = $input_val['field_avant_premiere_date_fin'][LANGUAGE_NONE][0]['value'];
  if (($start_date['year'] == $end_date['year']) && ($start_date['month'] == $end_date['month'])) {
    if ($start_date['day'] < $end_date['day']) {
      $date_diff = intval($end_date['day']) - intval($start_date['day']);
      if ($date_diff > 2) {
        form_set_error('field_avant_premiere_date_fin', t('the range between begin date and end date is from 1 - 3 days.'));
      }
    } else {
      form_set_error('field_avant_premiere_date_debut', t('The end date should be greater than begin date'));
    }
  } else {
    form_set_error('field_avant_premiere_date_debut', t('Both begin date and end date should be same year and month'));
  }
}

/**
 * Custom ger date range.
 */
function kandb_validate_get_dates_from_range($start, $end) {
  $interval = new DateInterval('P1D');
  $array = array();
  $realEnd = new DateTime($end);
  $realEnd->add($interval);

  $period = new DatePeriod(
    new DateTime($start), $interval, $realEnd
  );
  foreach ($period as $date) {
    $array[] = $date->format('d');
  }
  return $array;
}

/**
 * Implement get ville that has reference with node and grande_ouve unchecked.
 */
function kandb_validate_get_ville_has_reference($view_name, $result) {
  $type_options_existed = array();
  if ($view_name == 'avant_premiere_check') {
    $type_options_query = db_select('field_data_field_avant_premiere_ville', 'a');
    $type_options_query->innerJoin('node', 'b', 'b.nid = a.entity_id');
    $type_options_query->leftJoin('taxonomy_term_data', 'c', 'c.tid = a.field_avant_premiere_ville_tid');
    $type_options_query->leftJoin('field_data_field_avant_premiere_grande_ouve', 'd', 'd.entity_id = a.entity_id');
    $type_options_query->condition('d.field_avant_premiere_grande_ouve_value', 0, '=');
    $type_options_query->fields('a', array('field_avant_premiere_ville_tid'))
      ->distinct();

    $type_options_query->fields('c', array('name'));
    $type_options_query->orderBy('c.name', 'ASC');
    $type_options_existed += $type_options_query->execute()->fetchAllKeyed();
  }

  if ($view_name == 'nouveaute') {
    $type_options_query = db_select('field_data_field_programme_loc_ville', 'a');
    $type_options_query->innerJoin('node', 'b', 'b.nid = a.entity_id');
    $type_options_query->leftJoin('taxonomy_term_data', 'c', 'c.tid = a.field_programme_loc_ville_tid');
    $type_options_query->leftJoin('field_data_field_programme_online_date', 'd', 'd.entity_id = a.entity_id');
    // Fetch only records where date_time is greater than 30 days ago.
    $type_options_query->where('d.field_programme_online_date_value > DATE_ADD(NOW(), INTERVAL -30 DAY)');
    $type_options_query->fields('a', array('field_programme_loc_ville_tid'))
      ->distinct();

    $type_options_query->fields('c', array('name'));
    $type_options_query->orderBy('c.name', 'ASC');
    $type_options_existed += $type_options_query->execute()->fetchAllKeyed();
  }

  if ($view_name == 'livraison_immediate' || $view_name == 'notre_offre_en_france') {
    if ($result) {
      foreach ($result as $item) {
        $name = isset($item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->name) ? $item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->name : '';
        $tid = isset($item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->tid) ? $item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->tid : '';
        if ($name && $tid) {
          $type_options_existed[$tid] = $name;
        }
        $type_options_existed = array_unique($type_options_existed);
      }
    }
  }

  return $type_options_existed;
}

/**
 * Implements hook_views_query_alter().
 */
function kandb_validate_views_query_alter(&$view, &$query) {
  if ($view->name == 'livraison_immediate' && $view->current_display == 'block') {
    // Left join with Annee.
    $quarter = date_quarter();
    $year = date('Y');
    $next_quarter = ($quarter == 4) ? 1 : $quarter + 1;
    $next_year = ($quarter == 4) ? $year + 1 : $year;
    // For the begin quarter.
    // Alter field_annee_value.
    $view->query->where[1]['conditions'][0]['value'] = $year;
    // Alter field_trimestre_value.
    $view->query->where[1]['conditions'][1]['value'] = $quarter;

    // For the after quarter.
    // Alter field_annee_value.
    $view->query->where[2]['conditions'][0]['value'] = $next_year;
    // Alter field_trimestre_value.
    $view->query->where[2]['conditions'][1]['value'] = $next_quarter;
  }
}

/**
 * Return the calculate the quarter.
 */
function date_quarter() {
  $month = date('n');

  if ($month <= 3)
    return 1;
  if ($month <= 6)
    return 2;
  if ($month <= 9)
    return 3;

  return 4;
}

/**
 * Get the promotions by programme nid.
 *
 * @param int $nid
 *   The nid of programme CT.
 *
 * @return object entity.
 *   Return the object entity of Promotion CT.
 */
function get_nids_promotions_by_programme($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'promotion')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_promotion_programme', 'target_id', $nid)
    ->fieldCondition('field_promotion_start', 'value', date("Y-m-d H:i:s"), '<=')
    ->fieldCondition('field_promotion_stop', 'value', date("Y-m-d H:i:s"), '>=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $promotion_nids = array_keys($result['node']);
    return entity_load('node', $promotion_nids);
  }

  return NULL;
}

/**
 * Implements of hook_views_pre_render().
 */
function kandb_validate_views_pre_render($view) {
  if (in_array($view->name, array('nos_dernieres_offres', 'avant_premiere_check')) && count($view->result)) {
    $my_arr = $view->result;
    $dups = $new_arr = array();
    foreach ($my_arr as $key => $val) {
      if (!isset($new_arr[$val->nid])) {
        $new_arr[$val->nid] = $key;
      } else {
        if (isset($dups[$val->nid])) {
          $dups[$val->nid][] = $key;
        } else {
          $dups[$val->nid] = array($key);
        }
      }
    }

    if (count($dups)) {
      foreach ($view->result as $result) {
        if (array_key_exists($result->nid, $dups)) {
          $unset_array = array_values($dups[$result->nid]);
          foreach ($unset_array as $key_unset) {
            if (isset($view->result[$key_unset])) {
              $view->promotion_duplicate[$view->result[$key_unset]->nid][] = array(
                'object' => $view->result[$key_unset],
              );
              unset($view->result[$key_unset]);
            }
          }
        }
      }
    }
  }
}

/*
 * Get nid of Biens CT with specify status.
 */

function get_status_biens($nid, $tid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'bien')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_programme', 'target_id', $nid)
    ->fieldCondition('field_bien_statut', 'tid', $tid);

  $result = $query->execute();

  if (isset($result['node']) && count($result['node'])) {
    return TRUE;
  }

  return FALSE;
}

/*
 * Get tid taxonomy by field field_id_xls.
 */

function get_tid_by_id_field($status) {
  $query = db_select('field_data_field_id_xls', 't');
  $query->fields('t', array('entity_id'));
  $query->condition('field_id_xls_value', $status, '=');
  $result = $query->execute()->fetchObject();
  if (!empty($result)) {
    return $result->entity_id;
  }
  return FALSE;
}

/**
 * Get the promotions by avant nid.
 */
function get_nids_promotions_by_avant($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'promotion')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_promotion_avant_premiere', 'target_id', $nid)
    ->fieldCondition('field_promotion_start', 'value', date("Y-m-d H:i:s"), '<=')
    ->fieldCondition('field_promotion_stop', 'value', date("Y-m-d H:i:s"), '>=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $promotion_nids = array_keys($result['node']);
    return entity_load('node', $promotion_nids);
  }

  return NULL;
}

/**
 * Get the promotions by bien nid.
 */
function get_nids_promotions_by_bien($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'promotion')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_promotion_biens', 'target_id', $nid)
    ->fieldCondition('field_promotion_start', 'value', date("Y-m-d H:i:s"), '<=')
    ->fieldCondition('field_promotion_stop', 'value', date("Y-m-d H:i:s"), '>=');
  $result = $query->execute();

  if (isset($result['node'])) {
    $promotion_nids = array_keys($result['node']);
    return entity_load('node', $promotion_nids);
  }

  return NULL;
}

/**
 * Get number bien by status "Disponible" and public domain
 * @param int $domain_id domain id in table domain.
 *
 */
function get_total_bien_by_status_site($domain_id = 3) {
    //1:kaufman_core_local_com ,2:kandb_b2b ,3:kandb_b2c)
    //Get bien type
    $bien_status_id = get_tid_by_id_field(1);

    //Count total
    $query = db_select('node', 'n');
    $query->join('domain_access', 'da', 'n.nid = da.nid');
    $query->join('field_data_field_bien_statut', 'bt', 'n.nid = bt.entity_id');
    $query->addExpression('COUNT(n.nid)', 'total');
    $query->condition('n.status',1, '=')
      ->condition('da.gid', $domain_id, '=')
      ->condition('bt.field_bien_statut_tid',$bien_status_id,'=');
    $result = $query->execute()->fetchCol();
    if ($result) {
        return $result[0];
    }
  return 0;
}

/**
 * Get taxonomy  by vocabulary_machine_name 
 * @param str $term_name and str $vocabulary_name .
 *
 */
function get_taxonomy_by_vocabulary_name($term_name,$vocabulary_name){
  $terms = array();
  if($term = taxonomy_get_term_by_name($term_name)){
    foreach ($term as $value) {
      if($value->vocabulary_machine_name == $vocabulary_name){
        $terms[] = $value;
      }
    }
  }
  return $terms;
}