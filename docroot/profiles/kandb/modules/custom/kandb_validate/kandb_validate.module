<?php

/**
 * Implement hook_form_Form_ID_alter().
 */
function kandb_validate_form_avant_premiere_node_form_alter(&$form, &$form_state) {
  $form['#validate'][] = 'kandb_validate_avant_premiere';
}

/**
 * Custom validate start date and end date for avant_premiere ct.
 */
function kandb_validate_avant_premiere(&$form, &$form_state) {
  $input_val = $form_state['input'];
  $start_date = $input_val['field_avant_premiere_date_debut'][LANGUAGE_NONE][0]['value'];
  $end_date = $input_val['field_avant_premiere_date_fin'][LANGUAGE_NONE][0]['value'];
  if (($start_date['year'] == $end_date['year']) && ($start_date['month'] == $end_date['month'])) {
    if ($start_date['day'] < $end_date['day']) {
      $date_diff = intval($end_date['day']) - intval($start_date['day']);
      if ($date_diff > 2) {
        form_set_error('field_avant_premiere_date_fin', t('the range between begin date and end date is from 1 - 3 days.'));
      }
    } else {
      form_set_error('field_avant_premiere_date_debut', t('The end date should be greater than begin date'));
    }
  } else {
    form_set_error('field_avant_premiere_date_debut', t('Both begin date and end date should be same year and month'));
  }
}

/**
 * Custom ger date range.
 */
function kandb_validate_get_dates_from_range($start, $end) {
  $interval = new DateInterval('P1D');
  $array = array();
  $realEnd = new DateTime($end);
  $realEnd->add($interval);

  $period = new DatePeriod(
    new DateTime($start), $interval, $realEnd
  );
  foreach ($period as $date) {
    $array[] = $date->format('d');
  }
  return $array;
}

/**
 * Implement get ville that has reference with node and grande_ouve unchecked.
 */
function kandb_validate_get_ville_has_reference($view_name, $result) {
  $type_options_existed = array();
  if ($view_name == 'avant_premiere_check') {
    $type_options_query = db_select('field_data_field_avant_premiere_ville', 'a');
    $type_options_query->innerJoin('node', 'b', 'b.nid = a.entity_id');
    $type_options_query->leftJoin('taxonomy_term_data', 'c', 'c.tid = a.field_avant_premiere_ville_tid');
    $type_options_query->leftJoin('field_data_field_avant_premiere_grande_ouve', 'd', 'd.entity_id = a.entity_id');
    $type_options_query->condition('d.field_avant_premiere_grande_ouve_value', 0, '=');
    $type_options_query->fields('a', array('field_avant_premiere_ville_tid'))
      ->distinct();

    $type_options_query->fields('c', array('name'));
    $type_options_query->orderBy('c.name', 'ASC');
    $type_options_existed += $type_options_query->execute()->fetchAllKeyed();
  }

  if ($view_name == 'nouveaute') {
    $type_options_query = db_select('field_data_field_programme_loc_ville', 'a');
    $type_options_query->innerJoin('node', 'b', 'b.nid = a.entity_id');
    $type_options_query->leftJoin('taxonomy_term_data', 'c', 'c.tid = a.field_programme_loc_ville_tid');
    $type_options_query->leftJoin('field_data_field_programme_online_date', 'd', 'd.entity_id = a.entity_id');
    // Fetch only records where date_time is greater than 30 days ago.
    $type_options_query->where('d.field_programme_online_date_value > DATE_ADD(NOW(), INTERVAL -30 DAY)');
    $type_options_query->fields('a', array('field_programme_loc_ville_tid'))
      ->distinct();

    $type_options_query->fields('c', array('name'));
    $type_options_query->orderBy('c.name', 'ASC');
    $type_options_existed += $type_options_query->execute()->fetchAllKeyed();
  }

  if ($view_name == 'livraison_immediate') {
    if ($result) {
      foreach ($result as $item) {
        $name = isset($item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->name) ? $item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->name : '';
        $tid = isset($item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->tid) ? $item->field_field_programme_loc_ville[0]['rendered']['#options']['entity']->tid : '';
        if ($name && $tid) {
          $type_options_existed[$tid] = $name;
        }
        $type_options_existed = array_unique($type_options_existed);
      }
    }
  }

  return $type_options_existed;
}
