<?php

include_once 'class-kandb-business-rule.php';

/**
 * Implements hook_feeds_after_parse().
 */
function kandb_business_rules_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  Kandb_Business_Rules::set_is_feed_import();
  if ($source->id === FEED_ID_IMPORT_BIEN) {   // Is import for bien.
    // Set list nodes of bien.
    Kandb_Business_Rules::set_list_biens();
    $list_nodes_bien = Kandb_Business_Rules::get_list_biens();

    // Get all node from db and remmove all node what it has in file import.
    // To get list node don't have in file import.
    foreach ($result->items as $row) {
      $id_bien_in_file = $row[FEED_COLUMN_ID];
      $node_bien = Kandb_Business_Rules::get_bien_from_id_bien($id_bien_in_file);

      // If it is update, then remove from list node.
      // Use for RULE BIEN 103, 104, is update.
      if (!empty($node_bien)) {
        $node_bien = array_shift($node_bien);

        if (($key = array_search($node_bien->nid, $list_nodes_bien)) !== false) {
          unset($list_nodes_bien[$key]);
        }
      }
    }

    Kandb_Business_Rules::set_list_biens($list_nodes_bien);
  }
  elseif ($source->id === 'migration_program_import') {
    foreach ($result->items as &$row) {
      $slider_rt2012_titre = isset($row['reglementationthermiquetitre']) ? trim($row['reglementationthermiquetitre']) : '';
      $slider_rt2012_description = isset($row['reglementationthermiquezone1']) ? trim($row['reglementationthermiquezone1']) : '';
      $slider_rt2012_description1 = isset($row['reglementationthermiquezone2']) ? trim($row['reglementationthermiquezone2']) : '';
      $slider_rt2012_echelle = isset($row['reglementationthermiqueechelle']) ? trim($row['reglementationthermiqueechelle']) : '';
      if (($slider_rt2012_titre || $slider_rt2012_description || $slider_rt2012_description1) && ($slider_rt2012_echelle)) {
        unset($row['labelbbczone1']);
        unset($row['labelbbczone2']);
        unset($row['labelbbcechelle']);
        $row['rt2012'] = 1;
      }
      else {
        unset($row['reglementationthermiquezone1']);
        unset($row['reglementationthermiquezone2']);
        unset($row['reglementationthermiqueechelle']);
        $row['rt2012'] = 0;
      }
    }
  }
}

/**
 * Implements hook_feeds_presave
 * @param FeedsSource $source
 * @param type $entity
 * @param type $item
 */
function kandb_business_rules_feeds_presave(FeedsSource $source, $entity, $item) {
  if ($entity->feeds_item->entity_type == 'node') {
    if ($entity->feeds_item->id == 'programme_feed_import') {
      if ($entity->feeds_item->is_new == TRUE) {
        $entity->field_programme_statut[LANGUAGE_NONE][0]['value'] = 0;
      }

      // Update field_programme_loc_department by postal value
      $postal = $item[PROGRAMME_COLUMN_POSTAL];
      $postal_len = strlen($postal);
      $number_department = '';

      switch ($postal_len) {
        case 4:
          $number_department = '0' . $postal[0];
          break;

        case 5:
          $number_department = $postal[0] . $postal[1];
          break;

        default:
          break;
      }

      if(!empty($number_department)){
        $id_department = Kandb_Business_Rules::get_tax_department_by_number($number_department);
        if(!empty($id_department)){
          $entity->field_programme_loc_department[LANGUAGE_NONE][0]["tid"] = $id_department;
        }
      }

    }
    elseif ($entity->feeds_item->id == FEED_ID_IMPORT_BIEN) {

      $status_in_file = $item[FEED_COLUMN_STATUS];

      $entity_id = (isset($entity->nid)) ? $entity->nid : 0;
      // RULE BIEN 101, 102, is update.
      if (!empty($entity_id)) {
        if (!($status_in_file === TAXONOMY_STATUS_LOGEMENT_L || $status_in_file === TAXONOMY_STATUS_LOGEMENT_R)) {
          $node_bien = node_load($entity_id);
          $entity->field_bien_statut[LANGUAGE_NONE][0]["tid"] = $node_bien->field_bien_statut[LANGUAGE_NONE][0]['tid'];
        }
      }

      // RULE BIEN 106 , is new.
      if (empty($entity_id)) {
        $status_invisible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_INDISPONIBLE);
        $entity->field_bien_statut[LANGUAGE_NONE][0]["tid"] = $status_invisible;
      }

      // If node still not have status (not in rule bien), change character L or R to tax_id
      if (empty($entity->field_bien_statut[LANGUAGE_NONE]) && ($status_in_file == TAXONOMY_STATUS_LOGEMENT_L || $status_in_file == TAXONOMY_STATUS_LOGEMENT_R)) {
        $entity->field_bien_statut[LANGUAGE_NONE][0]["tid"] = Kandb_Business_Rules::get_tax_status_du_logement_by_name($status_in_file, FALSE);
      }

      // RULE BIEN B.109 http://confluence.digitas.fr/pages/viewpage.action?pageId=8227393
      if (isset($entity->field_prix_tva_20[LANGUAGE_NONE][0]['value']) && isset($entity->field_programme[LANGUAGE_NONE][0]['target_id'])) {
        $programme = node_load($entity->field_programme[LANGUAGE_NONE][0]['target_id']);
        if($programme) {
          if(isset($programme->field_tva[LANGUAGE_NONE][0]['tid'])) {
            $tva_tid = $programme->field_tva[LANGUAGE_NONE][0]['tid'];
            if($tva_tid) {
              $tva_term = taxonomy_term_load($tva_tid);
              if($tva_term) {
                if(isset($tva_term->field_facteur[LANGUAGE_NONE][0]['value'])) {
                  $tva = (float) $tva_term->field_facteur[LANGUAGE_NONE][0]['value'];
                  $bien_price = (float) $entity->field_prix_tva_20[LANGUAGE_NONE][0]['value'];
                  if($bien_price >= 0 && $tva) {
                    $bien_low_tva_price = $bien_price / 1.2 * ($tva + 1);
                    $entity->field_bien_low_tva_price[LANGUAGE_NONE][0]['value'] = round($bien_low_tva_price,2);
                  }
                }
              }
            }
          }
        }
      }

    }
  }
}

/**
 * Implements hook_node_presave().
 */
function kandb_business_rules_node_presave($node) {
  // By pass apply rule in case apply habiteo API.
  if (isset($node->flag_habiteo) && $node->flag_habiteo) {
    return;
  }
  
  // No need apply BRs in case devel generate.
  if ($_GET['q'] == 'admin/config/development/generate/content' ||
    (isset($node->devel_generate) && !empty($node->devel_generate))
    ) {
    return;
  }

  // To avoid loop from function node_save.
  $is_node_updating = Kandb_Business_Rules::get_is_node_updating();
  Kandb_Business_Rules::set_is_node_updating();

  if ($node && $node->type == 'programme' && !$is_node_updating) {
    if ($node->field_programme_statut[LANGUAGE_NONE][0]['value'] == 1) {
      $node->field_programme_online_date[LANGUAGE_NONE][0]['value'] = date('Y-m-d', time());
    }

    $tva_tid = isset($node->field_tva[LANGUAGE_NONE][0]['tid']) ? $node->field_tva[LANGUAGE_NONE][0]['tid'] : 0;
    $tva = 0;
    if ($tva_tid) {
      $terms = taxonomy_term_load($tva_tid);
      if ($terms) {
        $tva = (isset($terms->field_facteur[LANGUAGE_NONE][0]['value'])) ? $terms->field_facteur[LANGUAGE_NONE][0]['value'] : 0;
      }
    }

    $programme_price_min = isset($node->field_programme_price_min[LANGUAGE_NONE][0]['value']) ? (int) $node->field_programme_price_min[LANGUAGE_NONE][0]['value'] : 0;
    $programme_price_max = isset($node->field_programme_price_max[LANGUAGE_NONE][0]['value']) ? (int) $node->field_programme_price_max[LANGUAGE_NONE][0]['value'] : 0;

    if ($tva) {
      $node->field_program_low_tva_price_min[LANGUAGE_NONE][0]['value'] = ($programme_price_min / 1.2) * ($tva + 1);
      $node->field_program_low_tva_price_max[LANGUAGE_NONE][0]['value'] = ($programme_price_max / 1.2) * ($tva + 1);
    }
    else {
      $node->field_program_low_tva_price_min = array();
      $node->field_program_low_tva_price_max = array();
    }

    if (isset($node->nid)) {
      $query = new EntityFieldQuery();
      $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'bien')
          ->fieldCondition('field_programme', 'target_id', $node->nid, '=');

      $result = $query->execute();

      if (isset($result['node'])) {
        foreach ($result['node'] as $key => $values) {
          $biens = node_load($key);

          if ($biens) {
            $prix_tva_20 = isset($biens->field_prix_tva_20[LANGUAGE_NONE][0]['value']) ? (int) $biens->field_prix_tva_20[LANGUAGE_NONE][0]['value'] : 0;

            if ($tva) {
              $biens->field_tva[LANGUAGE_NONE][0]['tid'] = $tva_tid;
              $biens->field_bien_low_tva_price[LANGUAGE_NONE][0]['value'] = ($prix_tva_20 / 1.2) * ($tva + 1);
            }
            else {
              $biens->field_tva = array();
              $biens->field_bien_low_tva_price = array();
            }

            node_save($biens);
          }
        }
      }
    }
  }elseif ($node && $node->type == 'bien' && !$is_node_updating) {
    $price = 0;
    if(isset($node->field_prix_tva_20[LANGUAGE_NONE][0]['value'])):
      $price = $node->field_prix_tva_20[LANGUAGE_NONE][0]['value'];
      $tva_price = 0;

      if(isset($node->field_programme[LANGUAGE_NONE][0]['target_id'])):
        $program = node_load($node->field_programme[LANGUAGE_NONE][0]['target_id']);

        if(isset($program->field_tva[LANGUAGE_NONE][0]['tid'])):
          $tva_id = $program->field_tva[LANGUAGE_NONE][0]['tid'];
          $tva_term = taxonomy_term_load($tva_id);
          $field_facteur = 1 + floatval($tva_term->field_facteur[LANGUAGE_NONE][0]['value']);
          $tva_price = ($price / 1.2) * $field_facteur;
        endif;
      endif;

      $node->field_bien_low_tva_price[LANGUAGE_NONE][0]['value'] = $tva_price;
    endif;

    // Is node update.
    if(isset($node->nid)){
      $node_bien = node_load($node->nid);
      $status_disponible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_DISPONIBLE);

      $status_old = (isset($node_bien->field_bien_statut[LANGUAGE_NONE][0])) ? $node_bien->field_bien_statut[LANGUAGE_NONE][0]['tid'] : '';
      $status_new = (isset($node->field_bien_statut[LANGUAGE_NONE][0])) ? $node->field_bien_statut[LANGUAGE_NONE][0]['tid'] : '';
      if ($status_old != $status_new || $status_new == $status_disponible){
        Kandb_Business_Rules::set_can_hook_update();
      }
    }

  }
}

/**
 * Implements hook_node_update()
 */
function kandb_business_rules_node_update($node) {
  // To avoid loop from feed import.
  $is_feed_import = Kandb_Business_Rules::get_is_feed_import();

  // To avoid loop from function node_save.
  $is_node_updating = Kandb_Business_Rules::get_is_node_updating();
  $can_hook_update = Kandb_Business_Rules::get_can_hook_update();

  // Is manual update node in admin.
  if ($node->type === CONTENT_TYPE_BIEN && !$is_feed_import && (!$is_node_updating || $can_hook_update)) {
    Kandb_Business_Rules::set_is_node_updating();
    Kandb_Business_Rules::set_can_hook_update(FALSE);
    $node_bien = node_load($node->nid);

    $status_old = (isset($node_bien->field_bien_statut[LANGUAGE_NONE][0])) ? $node_bien->field_bien_statut[LANGUAGE_NONE][0]['tid'] : '';
    $status_new = (isset($node->field_bien_statut[LANGUAGE_NONE][0])) ? $node->field_bien_statut[LANGUAGE_NONE][0]['tid'] : '';

    $status_invisible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_INDISPONIBLE);
    $status_vendu = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_VENDU);
    $status_disponible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_DISPONIBLE);

    $arr_update_programme = array();
    if(isset($node->field_programme[LANGUAGE_NONE][0]["target_id"])){
      $programe = new stdClass();
      $programe->nid = $node->field_programme[LANGUAGE_NONE][0]["target_id"];
      $arr_update_programme[] = $programe;
    }

    if ($status_old != $status_new || ($status_old == $status_disponible || $status_new == $status_disponible)) {
      // RULE BIEN 107.
      Kandb_Business_Rules::recalculate_bien_to_programe($arr_update_programme);

      // RULE COUNTING 106.
      $current_bien = ($status_new == $status_disponible) ? $node : array();
      Kandb_Business_Rules::calculate_programe_price($arr_update_programme, $current_bien);

      // RULE COUNTING 107.
      Kandb_Business_Rules::find_room_bien_follow_programe($arr_update_programme);
    }

    if ($status_old != $status_new && ($status_new == $status_invisible || $status_new == $status_vendu)) {
      // RULE BIEN 108.
      Kandb_Business_Rules::delete_node_option_related_bien($node->nid);
    }

    // RULE Programme 102.
    Kandb_Business_Rules::set_status_programme_hasno_bien($arr_update_programme);

    // Save all node program
    Kandb_Business_Rules::node_save_list_program();
  }
}

function kandb_business_rules_feeds_after_import_callback($importer_id = '') {
  if ($importer_id === FEED_ID_IMPORT_BIEN) {   // is import for bien.
    // RULE BIEN 103 & 104.
    // Get list node don't have in file import.
//    $list_nodes_bien = Kandb_Business_Rules::get_list_biens();
    $list_nodes_bien = array();
    $uri = 'private://imported/';
    $file_name = 'imported_lot.txt';
    $prepare_file = file_prepare_directory($uri, FILE_CREATE_DIRECTORY);
    if ($prepare_file) {
      $path = drupal_realpath($uri . $file_name);
      $data = '';
      if (file_exists($path)) {
        $data = file_get_contents($path);
      }
      if ($data) {
        $list_nodes_bien = array_unique(array_map('trim', explode("\n", $data)));
      }
    }
    if (!empty($list_nodes_bien)) {
      $reset_sleep = 0;
      foreach ($list_nodes_bien as $nid) {
        $node = node_load($nid);
        if (isset($node->field_bien_statut[LANGUAGE_NONE][0]['tid'])) {
          $status_node = $node->field_bien_statut[LANGUAGE_NONE][0]['tid'];

          $status_invisible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_INDISPONIBLE);
          $status_vendu = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_VENDU);
          $status_disponible = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_DISPONIBLE);
          $status_reserve = Kandb_Business_Rules::get_tax_status_du_logement_by_name(TAXONOMY_STATUS_LOGEMENT_RESERVE);
          $flag = 0;

          switch ($status_node) { // Check status of current node.
            case $status_disponible:    // RULE BIEN 103.
              $flag = 1;
              $node->field_bien_statut[LANGUAGE_NONE][0]['tid'] = $status_invisible;
              break;
            case $status_reserve:       // RULE BIEN 104.
              $flag = 1;
              $node->field_bien_statut[LANGUAGE_NONE][0]['tid'] = $status_vendu;
              break;
            default:
              break;
          }

          if ($flag) {
            node_save($node);
            // Delete all node option what it related to this bien.
            Kandb_Business_Rules::delete_node_option_related_bien($nid);
          }
        }
        $reset_sleep++;
        if ($reset_sleep == 200) {
          sleep(5);
          $reset_sleep = 0;
        }
      }
    }

    $arr_update_programme = array();
    if(isset($node->field_programme[LANGUAGE_NONE][0]["target_id"])){
      $programe = new stdClass();
      $programe->nid = $node->field_programme[LANGUAGE_NONE][0]["target_id"];
      $arr_update_programme[] = $programe;
    }

    // The number of available bien is recalculated.
    Kandb_Business_Rules::recalculate_bien_to_programe();

    // RULE Programme 102.
    Kandb_Business_Rules::set_status_programme_hasno_bien($arr_update_programme);
  }

  if ($importer_id === FEED_ID_IMPORT_BIEN || $importer_id === 'programme_feed_import') {
    // RULE COUNTING 106.
    Kandb_Business_Rules::calculate_programe_price();

    // RULE COUNTING 107.
    Kandb_Business_Rules::find_room_bien_follow_programe();

    // RULE COUNTING 101.
    Kandb_Business_Rules::get_total_bien_follow_programe();
  }

  // Save all node program
  Kandb_Business_Rules::node_save_list_program();
}


function kandb_business_rules_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'bien_node_form') {
    if(isset($form['field_caracteristique'][LANGUAGE_NONE]['#options'])) {
      $caracteristiques = $form['field_caracteristique'][LANGUAGE_NONE]['#options'];
      $os = array('Jardin', 'Balcon', 'Terrasse', 'Parking', 'Box', 'Cave');
      foreach($caracteristiques as $id => $value) {
        if(in_array($value, $os)) {
          unset($caracteristiques[$id]);
        }
      }
      $form['field_caracteristique'][LANGUAGE_NONE]['#options'] = $caracteristiques;
    }

    $form['field_tva']['#disabled'] = TRUE;
  }
  if($form_id == 'programme_node_form' && arg(2) == 'edit') {
    $form['field_id_programme']['#disabled'] = TRUE;
  }
  if($form_id == 'partenaire_node_form') {
    $form['field_partenaire_programmes']['#access'] = FALSE;
    if(isset($form['field_partenaire_export'][LANGUAGE_NONE]['#default_value']) && $form['field_partenaire_export'][LANGUAGE_NONE]['#default_value'] == 3) {
      $form['field_partenaire_programmes']['#access'] = TRUE;
    }
  }
}

/**
 * @todo to get group biens follow program && nb_piece
 * @param type $id_programme
 * @param type $nb_piece
 * @return array
 */
function bien_to_display($id_programme, $nb_piece = "all") {
  $results = array();
  if (!isset($id_programme) || empty($id_programme)) {
    return $results;
  }

  if (!is_numeric($nb_piece)) {
    // nb_piece is all
    $nb_piece = 0;
  }

  $program = node_load($id_programme);
  $program_stock = 100;
  if(isset($program->field_programme_stock[LANGUAGE_NONE][0]['value']) && is_numeric($program->field_programme_stock[LANGUAGE_NONE][0]['value'])){
    $program_stock = intval($program->field_programme_stock[LANGUAGE_NONE][0]['value']);
  }

  $count_biens = Kandb_Business_Rules::get_list_bien_by_program_piece ($id_programme, $nb_piece, TRUE);
  $count_biens = round($count_biens * ($program_stock / 100), 0);
  if($count_biens == 0){
    return $results;
  }

  $results[] = Kandb_Business_Rules::get_cheapest_expensive_bien($id_programme, $nb_piece);  // Bien Cheapest.

  if($count_biens > 1){
    $results[] = Kandb_Business_Rules::get_cheapest_expensive_bien($id_programme, $nb_piece , FALSE); // Bien Expensive.

    if($count_biens > 2){
      // Need to exclude 2 bien cheapest && expensive
      $biens_between = Kandb_Business_Rules::get_between_cheapest_expensive_biens($id_programme, $nb_piece, $count_biens - 2, $results); // Bien Expensive.
      $results = array_merge($results, $biens_between);
    }

  }
  return $results;
}
