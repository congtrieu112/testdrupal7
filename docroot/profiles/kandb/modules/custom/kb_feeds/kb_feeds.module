<?php

/**
 * Search by term name.
 */
define('KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME', 0);

/**
 * Search by term id.
 */
define('KB_FEEDS_TAXONOMY_SEARCH_TERM_ID', 1);

/**
 * Search by GUID.
 */
define('KB_FEEDS_TAXONOMY_SEARCH_TERM_GUID', 2);

/**
 * Search by field id file.
 */
define('KB_FEEDS_TAXONOMY_SEARCH_TERM_FIELD_ID_FILE', 3);

define('MACHINE_NAME_B2B', 'kandb_b2b');
define('MACHINE_NAME_B2C', 'kandb_b2c');

function kb_feeds_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'kb_feeds');

  $info['KbFeedsProcessor'] = array(
    'hidden' => TRUE,
    'handler' => array(
      'parent' => 'FeedsPlugin',
      'class' => 'KbFeedsProcessor',
      'file' => 'KbFeedsProcessor.inc',
      'path' => $path,
    ),
  );

  $info['KbFeedsCSVParser'] = array(
    'name' => 'KB CSV parser',
    'description' => 'Parse data in Comma Separated Value format.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'KbFeedsCSVParser',
      'file' => 'KbFeedsCSVParser.inc',
      'path' => $path,
    ),
  );

  $info['KbEncodingCSVParser'] = array(
    'name' => 'KB migration program video parser',
    'description' => 'Only use for "Migration program video import" importer.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'KbEncodingCSVParser',
      'file' => 'KbEncodingCSVParser.inc',
      'path' => $path,
    ),
  );

  $info['KbDocCommuniqueCSVParser'] = array(
    'name' => 'KB migration document communique parser',
    'description' => 'Only use for "Document import communique de presse" importer.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'KbDocCommuniqueCSVParser',
      'file' => 'KbDocCommuniqueCSVParser.inc',
      'path' => $path,
    ),
  );

  $info['KbFeedsNodeProcessor'] = array(
    'name' => 'KB Node processor',
    'description' => 'Create and update nodes.',
    'help' => 'Create and update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'KbFeedsNodeProcessor',
      'file' => 'KbFeedsNodeProcessor.inc',
      'path' => $path,
    ),
  );
  $info['KbFeedsMiNodeProcessor'] = array(
    'name' => 'KB multiple importer node processor',
    'description' => 'Create and update nodes by 2 feeds importer.',
    'help' => 'Create and update nodes from parsed content by 2 feeds importer.',
    'handler' => array(
      'parent' => 'FeedsProcessor',
      'class' => 'KbFeedsMiNodeProcessor',
      'file' => 'KbFeedsMiNodeProcessor.inc',
      'path' => $path,
    ),
  );
  $info['KbFeedsHTTPFetcher'] = array(
    'name' => 'KB HTTP fetcher',
    'description' => 'Download content from a URL.',
    'help' => 'Download content from a URL.',
    'handler' => array(
      'parent' => 'FeedsFetcher',
      'class' => 'KbFeedsHTTPFetcher',
      'file' => 'KbFeedsHTTPFetcher.inc',
      'path' => $path,
    ),
  );


  return $info;
}

/**
 * Implements hook_feeds_processor_targets_alter()
 * @param array $targets
 * @param type $entity_type
 * @param type $bundle
 */
function kb_feeds_feeds_processor_targets_alter(array &$targets, $entity_type, $bundle) {
  if ($entity_type == 'node' && $bundle == 'bien') {
    if (isset($targets['field_bien_statut'])) {
      $targets['field_bien_statut']['callback'] = 'field_bien_statut_feeds_set_target';
      $targets['field_bien_statut']['summary_callbacks'][0] = 'field_bien_statut_feeds_summary_callback';
      $targets['field_bien_statut']['form_callbacks'][0] = 'field_bien_statut_feeds_form_callback';
    }
  }
}

function field_bien_statut_feeds_form_callback(array $mapping, $target, array $form, array $form_state) {
  return array(
    'term_search' => array(
      '#type' => 'select',
      '#title' => t('Search taxonomy terms by'),
      '#options' => array(
        KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME => 'Term name',
        KB_FEEDS_TAXONOMY_SEARCH_TERM_ID => 'Term ID',
        KB_FEEDS_TAXONOMY_SEARCH_TERM_GUID => 'GUID',
        KB_FEEDS_TAXONOMY_SEARCH_TERM_FIELD_ID_FILE => 'Field id file'
      ),
      '#default_value' => !empty($mapping['term_search']) ? $mapping['term_search'] : KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME,
    ),
    'autocreate' => array(
      '#type' => 'checkbox',
      '#title' => t('Auto create'),
      '#description' => t("Create the term if it doesn't exist."),
      '#default_value' => !empty($mapping['autocreate']) ? $mapping['autocreate'] : 0,
      '#states' => array(
        'visible' => array(
          ':input[name$="[settings][term_search]"]' => array('value' => KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME),
        ),
      ),
    ),
  );
}

function field_bien_statut_feeds_set_target(FeedsSource $source, $entity, $target, array $terms, array $mapping) {
  // Add in default values.
  $mapping += array(
    'term_search' => KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME,
    'autocreate' => FALSE,
  );

  $info = field_info_field($target);

  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache['allowed_values'][$target])) {
    $cache['allowed_values'][$target] = taxonomy_allowed_values($info);
  }

  if (!isset($cache['allowed_vocabularies'][$target])) {
    foreach ($info['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $cache['allowed_vocabularies'][$target][$vocabulary->vid] = $vocabulary->machine_name;
      }
    }
  }

  // Some kind of configuration issue. Perhaps the vocabulary was deleted.
  // Nothing we can do about it.
  if (empty($cache['allowed_vocabularies'][$target])) {
    return;
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $cache['allowed_vocabularies'][$target])
    ->range(0, 1);


  $field = isset($entity->$target) ? $entity->$target : array('und' => array());

  // Allow for multiple mappings to the same target.
  $delta = count($field['und']);

  // Iterate over all values.
  foreach ($terms as $term) {

    if ($info['cardinality'] == $delta) {
      break;
    }

    $tid = FALSE;

    // FeedsTermElement already is a term.
    if ($term instanceof FeedsTermElement) {
      $tid = $term->tid;
    } else {
      switch ($mapping['term_search']) {

        // Lookup by name.
        case KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME:
          $term = trim($term);
          $name_query = clone $query;
          if (strlen($term) && $tids = $name_query->propertyCondition('name', $term)->execute()) {

            // Find the first allowed term.
            foreach ($tids['taxonomy_term'] as $possible_term) {
              if (isset($cache['allowed_values'][$target][$possible_term->tid])) {
                $tid = $possible_term->tid;
                break;
              }
            }
          } elseif ($mapping['autocreate'] && strlen($term)) {
            $term = (object) array(
                'name' => drupal_substr($term, 0, 255),
                'vid' => key($cache['allowed_vocabularies'][$target]),
                'vocabulary_machine_name' => reset($cache['allowed_vocabularies'][$target]),
            );
            taxonomy_term_save($term);
            $tid = $term->tid;
            // Add to the list of allowed values.
            $cache['allowed_values'][$target][$tid] = $term->name;
          }
          break;

        // Lookup by tid.
        case KB_FEEDS_TAXONOMY_SEARCH_TERM_ID:
          if (is_numeric($term)) {
            $tid = (int) $term;
          }
          break;

        case KB_FEEDS_TAXONOMY_SEARCH_TERM_FIELD_ID_FILE:
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'taxonomy_term')
            ->entityCondition('bundle', $cache['allowed_vocabularies'][$target])
            ->fieldCondition('field_id_file', 'value', $term, '=')
            ->range(0, 1);
          $results = $query->execute();
          foreach ($results["taxonomy_term"] as $result) {
            $tid = $result->tid;
          }
          break;

        // Lookup by GUID.
        case KB_FEEDS_TAXONOMY_SEARCH_TERM_GUID:
          $tid = kb_feeds_taxonomy_feeds_term_lookup_term_by_guid($term);
          break;
      }
    }

    if ($tid && isset($cache['allowed_values'][$target][$tid])) {
      $field['und'][] = array('tid' => $tid);
      $delta++;
    }
  }

  $entity->$target = $field;
}

/**
 * Looks up a term by GUID, assumes SQL storage backend.
 *
 * @param string $guid
 *   The Feeds GUID to compare against.
 *
 * @return int|FALSE
 *   The term id, or FALSE if one was not found.
 */
function kb_feeds_taxonomy_feeds_term_lookup_term_by_guid($guid) {
  return db_select('feeds_item')
      ->fields('feeds_item', array('entity_id'))
      ->condition('entity_type', 'taxonomy_term')
      ->condition('guid', $guid)
      ->execute()
      ->fetchField();
}

/**
 * Mapping configuration summary for taxonomy.module.
 */
function field_bien_statut_feeds_summary_callback(array $mapping, $target, array $form, array $form_state) {
  $options = array(
    KB_FEEDS_TAXONOMY_SEARCH_TERM_NAME => 'Term name',
    KB_FEEDS_TAXONOMY_SEARCH_TERM_ID => 'Term ID',
    KB_FEEDS_TAXONOMY_SEARCH_TERM_GUID => 'GUID',
    KB_FEEDS_TAXONOMY_SEARCH_TERM_FIELD_ID_FILE => 'Field id file'
  );
  if (empty($mapping['term_search'])) {
    return t('Search taxonomy terms by: <strong>@search</strong>', array('@search' => $options[FEEDS_TAXONOMY_SEARCH_TERM_NAME]));
  }
  return t('Search taxonomy terms by: <strong>@search</strong>', array('@search' => $options[$mapping['term_search']]));
}

function getListTidTaxonomyByName($bundle, $value) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'taxonomy_term')
    ->entityCondition('bundle', $bundle)
    ->range(0, 1);
  $name_query = clone $query;
  $tids = $name_query->propertyCondition('name', $value)->execute();

  foreach ($tids["taxonomy_term"] as $possible_term) {
    $tid = $possible_term->tid;
  }

  return $tid;
}

/**
 * Implements hook_feeds_presave
 * @param FeedsSource $source
 * @param type $entity
 * @param type $item
 */
function kb_feeds_feeds_presave(FeedsSource $source, $entity, $item, $entity_id) {
  $logging = '';

  $totalItems = count($item);
  $totalColumn = isset($source->getConfig()['KbFeedsCSVParser']['total_column']) ? $source->getConfig()['KbFeedsCSVParser']['total_column'] : $totalItems;

  $file_log_name = variable_get($entity->feeds_item->id . '_log_name');
  $warning_count = variable_get($entity->feeds_item->id . '_warning', 0);
  $skip_count = variable_get($entity->feeds_item->id . '_rejected', 0);

  $tid = 0;
  if ($entity->feeds_item->entity_type == 'node' || $entity->feeds_item->entity_type == 'taxonomy_term') {
    if ($entity->feeds_item->id == 'programme_feed_import') {
      if ($totalItems != $totalColumn) {
        $logging = $item[0] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'term_field_id_warning' => array(
            2 => 'field_marque_comm',
            3 => 'field_zone_activite',
            4 => 'field_programme_loc_ville',
            5 => 'field_programme_loc_arr',
            14 => 'field_type_programme'
          ),
          'number_warning' => array(
            13 => 'field_annee',
          ),
          'text_box' => array(
            0 => 'field_id_programme',
          ),
          'text_box_warning' => array(
            7 => 'field_programme_loc_num',
          ),
          'custom_trimestre_options_warning' => array(
            12 => 'trimestre',
          ),
        );

        $logging = validateFieldInFileImportFeeds($validates, $item, $entity);
        if($logging && strpos($logging, 'Warning') !== FALSE) {
          $warning_count += 1;
          variable_set($entity->feeds_item->id . '_warning', $warning_count);
        }
        if (!$logging || !strpos($logging, 'Skip import')) {
          if(isset($item[58]) && $item[58] == 0) {
            $entity->field_espace_vente_longitude[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item[59]) && $item[59] == 0) {
            $entity->field_espace_vente_latitude[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item[18]) && $item[18] == 0) {
            $entity->field_programme_loc_long[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item[19]) && $item[19] == 0) {
            $entity->field_programme_loc_lat[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item[8]) && $item[8]) {
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'taxonomy_term')
              ->fieldCondition('field_id_type_voie', 'value', $item[8]);
            $result = $query->execute();
            $tids = array_keys($result['taxonomy_term']);

            if($tids && count($tids) == 1) {
              $entity->field_programme_loc_type[LANGUAGE_NONE][0]['tid'] = $tids[0];
            } else {
              $logging .= $item[0] . '|field_id_type_voie|field_id_type_voie:' . $item[8] . '|' . 'Term id type voie not mapping' . '|' . 'Warning' . "\n";
            }
          }
        }
      }
    } elseif ($entity->feeds_item->id == 'parcel_feed_import') {
      $domains = domain_domains();
      $domain_id_b2b = '';
      $domain_id_b2c = '';
      foreach($domains as $domain) {
        $machine_name = isset($domain['machine_name']) ? $domain['machine_name'] : '';
        if($machine_name == MACHINE_NAME_B2B) {
          $domain_id_b2b = $domain['domain_id'];
        } elseif($machine_name == MACHINE_NAME_B2C) {
          $domain_id_b2c = $domain['domain_id'];
        }
      }

      $entity->domains = array();
      if (isset($item[30])) {
        if (($item[30] == 1 || $item[30] == 2) && $domain_id_b2b) {
          $entity->domains[3] = $domain_id_b2b;
        }
        if (($item[30] == 3 || $item[30] == 2) && $domain_id_b2c) {
          $entity->domains[2] = $domain_id_b2c;
        }
      }

      if (empty($entity->domains)) {
        $logging = $item[0] . '||' . ' Domains value not validate |' . $item[30] . '| Skip imported' . "\n";
      }
      if ($totalItems != $totalColumn) {
        $logging .= $item[0] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'term_name' => array(
            2 => 'field_type',
          ),
          'entity_id' => array(
            1 => 'field_programme'
          ),
          'term_field_id_warning' => array(
            4 => 'field_nb_pieces',
            6 => 'field_nb_chambres',
            7 => 'field_etage',
          ),
          'term_name_warning' => array(
            10 => 'field_orientation'
          ),
          'number_warning' => array(
            3 => 'field_prix_tva_20',
            9 => 'field_superficie',
            16 => 'field_caracteristique_jardin',
            17 => 'field_caracteristique_balcon',
            19 => 'field_caracteristique_terrasse',
            21 => 'field_caracteristique_parking',
            22 => 'field_caracteristique_box',
            23 => 'field_caracteristique_cave',
          ),
        );

        $logging .= validateFieldInFileImportFeeds($validates, $item, $entity);
        if($logging && strpos($logging, 'Warning') !== FALSE) {
          $warning_count += 1;
          variable_set($entity->feeds_item->id . '_warning', $warning_count);
        }
        if (!$logging || !strpos($logging, 'Skip import')) {
          if (isset($entity->field_programme[LANGUAGE_NONE][0]['target_id'])) {
            $nodes = node_load($entity->field_programme[LANGUAGE_NONE][0]['target_id']);
            if ($nodes && !empty($nodes->field_tva[LANGUAGE_NONE])) {
              $tid = $nodes->field_tva[LANGUAGE_NONE][0]['tid'];
            }
          }
          //Cut the last digits after the latest underscore of IDKL to have the short Bien numero to stored in numero_lot
          if(isset($entity->field_id_bien[LANGUAGE_NONE][0]['value']) && $entity->field_id_bien[LANGUAGE_NONE][0]['value']) {
            $bien_id = $entity->field_id_bien[LANGUAGE_NONE][0]['value'];
            $arr_bien_id = explode('-', $bien_id);
            if(count($arr_bien_id) == 3) {
              $number_lot = $arr_bien_id[2];
              if($number_lot) {
                $entity->field_numero_lot[LANGUAGE_NONE][0]['value'] = $number_lot;
              }
            }
          }

          $caracteristiques = array(
            'Jardin' => 'field_caracteristique_jardin',
            'Balcon' => 'field_caracteristique_balcon',
            'Terrasse' => 'field_caracteristique_terrasse',
            'Parking' => 'field_caracteristique_parking',
            'Box' => 'field_caracteristique_box',
            'Cave' => 'field_caracteristique_cave'
          );
          // Check option caracteristiques if textboxes on array above have value
          foreach($caracteristiques as $caract_key => $caract_field) {
            $fields = $entity->$caract_field;
            if(isset($fields[LANGUAGE_NONE][0]['value']) && $fields[LANGUAGE_NONE][0]['value'] > 0) {
              $caract_terms = taxonomy_get_term_by_name($caract_key, 'caracteristiques');
              foreach($caract_terms as $caract_tid => $caract_term) {
                if($caract_tid) {
                  $entity->field_caracteristique[LANGUAGE_NONE][]['tid'] = $caract_tid;
                }
              }
            }
          }
        }
      }
    } elseif ($entity->feeds_item->id == 'document_import') {
      if ($totalItems > 7 || $totalItems <= 5) {
        $logging = $item['identifiantdocbibliotheque'] . '||' . 'Structure error (Total column diffenrence total items)' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'term_name_warning' => array(
            'categorie' => 'field_document_type',
          ),
          'date_time' => array(
            'date' => 'field_document_date'
          ),
        );

        $logging = validateFieldInFileImportFeeds($validates, $item, $entity, 'identifiantdocbibliotheque');
        if($logging && strpos($logging, 'Warning') !== FALSE) {
          $warning_count += 1;
          variable_set($entity->feeds_item->id . '_warning', $warning_count);
        }
        if (!$logging || !strpos($logging, 'Skip import')) {
          $status = 0;
          $sticky = 0;
          switch ($entity->status) {
            case "On line":
              $status = 1;
              break;
            case "Off line":
              break;
            default:
              $sticky = 1;
              break;
          }

          $entity->status = $status;
          $entity->sticky = $sticky;

//          if(isset($entity->{'Temporary target 1'}) || isset($entity->field_document_file[LANGUAGE_NONE])) {
//            $document_files_old = $entity->{'Temporary target 1'};
//            $document_files_new = $entity->field_document_file[LANGUAGE_NONE];
//            $document_files = array_merge($document_files_old, $document_files_new);
//            $entity->field_document_file[LANGUAGE_NONE] = $document_files;
//          }
        }
      }
    } elseif ($entity->feeds_item->id == 'kb_patrimoine_import') {
      if ($totalItems != 16) {
        $logging = $item['identifiantprogramme'] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      }
    } elseif ($entity->feeds_item->id == 'document_import_communique_de_presse') {
      if ($totalItems > 17 || $totalItems <= 15) {
        $logging = $item['identifiantcommunique'] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'term_name' => array(
            'categorie' => 'field_document_type',
          ),
        );

        $logging = validateFieldInFileImportFeeds($validates, $item, $entity, 'identifiantcommunique');
//        if (!$logging || !strpos($logging, 'Skip import')) {
//          if(isset($entity->{'Temporary target 1'}) || isset($entity->field_document_file[LANGUAGE_NONE])) {
//            $document_files_old = $entity->{'Temporary target 1'};
//            $document_files_new = $entity->field_document_file[LANGUAGE_NONE];
//            $document_files = array_merge($document_files_old, $document_files_new);
//            $entity->field_document_file[LANGUAGE_NONE] = $document_files;
//          }
//        }
      }
    } elseif ($entity->feeds_item->id == 'maison_feed_import') {
      $logging = '';
      if ($totalItems != $totalColumn) {
        $logging = $item[0] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'number' => array(
            4 => 'field_maison_nb_etage',
            5 => 'field_maison_nb_pieces',
            6 => 'field_maison_nb_chambres',
            7 => 'field_maison_nb_salle_bain',
            10 => 'field_maison_surface_sejour',
            11 => 'field_maison_surface_cuisine',
            12 => 'field_maison_surface_totale',
          ),
        );

        $logging = validateFieldInFileImportFeeds($validates, $item, $entity);
      }
    } elseif ($entity->feeds_item->id == 'migration_program_video_import') {
      if ($totalItems != 2) {
        $logging = $item['identifiantprogramme'] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      }
      if (isset($entity->is_new) && $entity->is_new == TRUE) {
        $logging .= $item['identifiantprogramme'] . '||' . 'Item not found (Program does not exist in BO: '. $item['identifiantprogramme'] . ')| Skip imported' . "\n";
      }
    } elseif ($entity->feeds_item->id == 'migration_program_import') {
      if ($totalItems > 44 || $totalItems < 41) {
        $logging = $item['identifiantprogramme'] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $validates = array(
          'text_box' => array(
            'identifiantprogramme' => 'field_id_programme',
          ),
          'term_name_warning' => array(
            'typeprogramme' => 'field_type_programme',
          ),
          'number' => array(
            'affichagestock' => 'field_programme_stock',
          ),
          'number_warning' =>  array(
            'anneelivraison' => 'field_annee',
            'prixmoyenm2' => 'field_programme_avg_price',
            'bureaudeventex' => 'field_espace_vente_longitude',
            'bureaudeventey' => 'field_espace_vente_latitude',
            'x' => 'field_programme_loc_long',
            'y' => 'field_programme_loc_lat',
          ),
          'check_box' => array(
            'statut' => 'field_programme_statut',
            'rt2012' => 'field_slider_rt2012_bbc'
          ),
          'check_box_warning' => array(
            'tva' => 'field_tva'
          ),
          'custom_echelle_options_warning' => array(
            'labelbbcechelle' => 'field_slider_rt2012_echelle',
            'reglementationthermiqueechelle' => 'field_slider_rt2012_echelle',
          ),
          'custom_trimestre_options_warning' => array(
            'trimestrelivraison' => 'field_trimestre'
          ),
          'text_box' => array(
            'nom' => 'field_title',
            'typedevoie' => 'field_programme_loc_type',
            'nomrue' => 'field_programme_loc_rue',
            'cp' => 'field_programme_loc_cp',
          ),
          'text_box_warning' => array(
            'mentionlegales' => 'field_programme_mtn_legale',
            'noderue' => 'field_programme_loc_num',
          ),
          'date_time_programme_warning' => array(
            'datemiseenligne' => 'field_programme_online_date'
          )
        );

        $logging = validateFieldInFileImportFeeds($validates, $item, $entity, 'identifiantprogramme');
        if($logging && strpos($logging, 'Warning') !== FALSE) {
          $warning_count += 1;
          variable_set($entity->feeds_item->id . '_warning', $warning_count);
        }
        if (!$logging || !strpos($logging, 'Skip import')) {
          if (in_array((int)$item['tva'], array(0,1))) {
            $terms = taxonomy_get_term_by_name('TVA 5.5%', 'tva');
            if ($terms) {
              foreach ($terms as $key => $value) {
                $tid = $key;
              }
            }

            if(isset($item['tva']) && (int)$item['tva'] == 0) {
              $entity->field_tva[LANGUAGE_NONE][0]['tid'] = 1;
            } else {
              $entity->field_tva[LANGUAGE_NONE][0]['tid'] = $tid;
            }

            $tid = 0;
          }

          if(isset($item['x']) && $item['x'] == 0) {
            $entity->field_programme_loc_long[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item['y']) && $item['y'] == 0) {
            $entity->field_programme_loc_lat[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item['bureaudeventex']) && $item['bureaudeventex'] == 0) {
            $entity->field_espace_vente_longitude[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($item['bureaudeventey']) && $item['bureaudeventey'] == 0) {
            $entity->field_espace_vente_latitude[LANGUAGE_NONE][0]['value'] = '';
          }

          if(isset($entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'])) {
            $echelle_value = $entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'];

            switch ($echelle_value) {
              case 'A':
                $entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'] = 1;
                break;
              case 'B':
                $entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'] = 2;
                break;
              case 'Void':
                $entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'] = 3;
                break;
              default:
                $entity->field_slider_rt2012_echelle[LANGUAGE_NONE][0]['value'] = 0;
                break;
            }
          }

          //Recaculated field_programme_loc_long, field_programme_loc_lat,
          //field_espace_vente_longitude, field_espace_vente_latitude (dividing by 1.000.000)
          if(isset($entity->field_programme_loc_long[LANGUAGE_NONE][0]['value'])) {
            $loc_long = (int) $entity->field_programme_loc_long[LANGUAGE_NONE][0]['value'];

            $entity->field_programme_loc_long[LANGUAGE_NONE][0]['value'] = ($loc_long != 0) ? $loc_long / 1000000 : '';
          }

          if(isset($entity->field_programme_loc_lat[LANGUAGE_NONE][0]['value'])) {
            $loc_lat = (int) $entity->field_programme_loc_lat[LANGUAGE_NONE][0]['value'];
            $entity->field_programme_loc_lat[LANGUAGE_NONE][0]['value'] = ($loc_lat != 0) ? $loc_lat / 1000000 : '';
          }

          if(isset($entity->field_espace_vente_longitude[LANGUAGE_NONE][0]['value'])) {
            $vente_longitude = (int) $entity->field_espace_vente_longitude[LANGUAGE_NONE][0]['value'];
            $entity->field_espace_vente_longitude[LANGUAGE_NONE][0]['value'] = ($vente_longitude != 0) ? $vente_longitude / 1000000 : '';
          }

          if(isset($entity->field_espace_vente_latitude[LANGUAGE_NONE][0]['value'])) {
            $vente_latitude = (int) $entity->field_espace_vente_latitude[LANGUAGE_NONE][0]['value'];
            $entity->field_espace_vente_latitude[LANGUAGE_NONE][0]['value'] = ($vente_latitude != 0) ? $vente_latitude / 1000000 : '';
          }

          // if field_programme_statut is checked (publish: checked, promoted to front page : unchecked, sticky at top of lists : unchecked)
          //    else (Published : unchecked , Promoted to front page : unchecked, Sticky at top of lists : unchecked)
          if(isset($entity->field_programme_statut[LANGUAGE_NONE][0]['value'])) {
            $entity->status = $entity->field_programme_statut[LANGUAGE_NONE][0]['value'];
            $entity->promote = "0";
            $entity->sticky = "0";
          }
        }
      }
    } elseif ($entity->feeds_item->id == 'city_feed_import') {
      if ($totalItems != $totalColumn) {
        $logging = $item[0] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      }
    } elseif ($entity->feeds_item->id == 'district_feed_import') {
      if ($totalItems != $totalColumn) {
        $logging = $item[2] . '||' . 'Structure error (Total column diffenrence total items' . '| Skip imported' . "\n";
      } else {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'taxonomy_term')
          ->entityCondition('bundle', 'ville')
          ->fieldCondition('field_idk', 'value', $item[1]);

        $results = $query->execute();
        if (!$results["taxonomy_term"]) {
          $logging = $item[0] . '|field_idk|' . 'Term value not mapping' . '|' . 'Skip import' . "\n";
        }
      }
    }
    elseif ($entity->feeds_item->id == 'migration_bien_import') {
      if ($totalItems != 46) {
        $logging = $item['identifiantlogement'] . '||' . 'Structure error (Total column diffenrence total items' . ')| Skip imported' . "\n";
      }
      elseif (!(isset($entity->is_new) && $entity->is_new == TRUE)) {
        $logging .= $item['identifiantlogement'] . '||' . 'Item really exist (Bien really exist in BO: '. $item['identifiantlogement'] . ')| Skip imported' . "\n";
      }
      else {
        $validates = array(
          'term_field_id' => array(
            'statutlogement' => 'field_bien_statut',
          ),
          'entity_id' => array(
            'identifiantprogramme' => 'field_programme',
          ),
        );
        $logging = validateFieldInFileImportFeeds($validates, $item, $entity, 'identifiantlogement');
      }
    }
    elseif ($entity->feeds_item->id == 'migration_bien_import_v2') {
      $file_log_name = 'migration_bien_import_v2_log_' . date("Y-m-d_h_i") . '.txt';
      if ($totalItems != 46) {
        $logging = $item['identifiantlogement'] . '||' . 'Structure error (Total column diffenrence total items' . ')| Skip imported' . "\n";
      }
      elseif (isset($entity->is_new) && $entity->is_new == TRUE) {
        $logging .= $item['identifiantlogement'] . '||' . 'Item not exist (Bien not exist in BO: '. $item['identifiantlogement'] . ')| Skip imported' . "\n";
      }
    }
    elseif($entity->feeds_item->id == 'partenaire_import') {
      $validates = array(
        'check_box_warning' => array(
          'transferactif' => 'field_partenaire_actif',
          'typedeflux' => 'field_partenaire_nouveau',
          'lotplan' => 'field_partenaire_plan',
          'envoiavantpremier' => 'field_partenaire_avant_premiere',
          'grandeperspective' => 'field_partenaire_grande_perspect',
        ),
        'custom_partenaire_export_options' => array(
          'typeexport' => 'field_partenaire_export'
        )
      );

      $logging = validateFieldInFileImportFeeds($validates, $item, $entity, 'identifiantpartenaire');
      if($logging && strpos($logging, 'Warning') !== FALSE) {
        $warning_count += 1;
        variable_set($entity->feeds_item->id . '_warning', $warning_count);
      }
      $arr_parten_fields = array(
        'transferactif' => 'field_partenaire_actif',
        'typedeflux' => 'field_partenaire_nouveau',
        'lotplan' => 'field_partenaire_plan',
        'envoiavantpremier' => 'field_partenaire_avant_premiere',
        'grandeperspective' => 'field_partenaire_grande_perspect',
        'typeexport' => 'field_partenaire_export',
      );

      foreach($arr_parten_fields as $key => $field) {
        if(isset($item[$key]) && $item[$key] == "") {
          $partenaire = &$entity->$field;
          $partenaire[LANGUAGE_NONE][0]['value'] = -1;
          continue;
        }

        if(isset($item[$key])) {
          $partenaire = &$entity->$field;
          if($key == 'typeexport'){
            if(!in_array($item[$key], array(1,2,3))) {
              $partenaire[LANGUAGE_NONE][0]['value'] = -1;
            }
          } else {
            if(!in_array($item[$key], array('Oui' , 'Non', 'Nouveau', 'Ancien', '0', '1'))) {
              $partenaire[LANGUAGE_NONE][0]['value'] = -1;
            }
          }
        }
      }
    } elseif ($entity->feeds_item->id == 'partenaire_programme_import') {
      $validates = array(
        'primary_key' => array(
          0 => 'field_id_partenaire',
        ),
        'entity_id' => array(
          1 => 'field_partenaire_programmes',
        ),
      );

      $logging = validateFieldInFileImportFeeds($validates, $item, $entity);
    }
  }

  if ($logging) {
    createFileErrorLogTxt($file_log_name, $logging);
    if(strpos($logging, 'Skip import')) {
      $skip_count += 1;
      variable_set($entity->feeds_item->id . '_rejected', $skip_count);
      $entity->feeds_item->skip = TRUE;
    }
  }

  if ($tid > 0) {
    $entity->field_tva[LANGUAGE_NONE][0]['tid'] = $tid;
  }
}

/**
 * Implements hook_feeds_after_parse
 * @param FeedsSource $source
 * @param type $entity
 * @param type $item
 */
function kb_feeds_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  //$file_log_name = $source->id . '_log_' . date('Y-m-d') . '.txt';
  $file_log_name = variable_get($source->id . '_log_name');
  $logging = '';
  $key_errorlog = '';
  if ($source->id === "document_import" || $source->id === "kb_patrimoine_import" || $source->id === "document_import_communique_de_presse") {
    global $base_url;
    foreach ($result->items as $key => $row) {
      $list_file_id = array();    // List column have upload file
      if ($source->id === "document_import" || $source->id === 'document_import_communique_de_presse') {
        $list_file_id = array(
          "field_document_file" => "lienfichier"
        );

        $key_errorlog = $document_id = isset($result->items[$key]['identifiantcommunique']) ? $result->items[$key]['identifiantcommunique'] : '';

        if($source->id === "document_import") {
          $key_errorlog = $document_id = isset($result->items[$key]['identifiantdocbibliotheque']) ? $result->items[$key]['identifiantdocbibliotheque'] : '';
        }

        if($document_id) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'document')
            ->fieldCondition('field_document_id', 'value', $document_id, '=')
            ->range(0, 1);


          $results = $query->execute();
          if($results) {
            $nids = array_keys($results["node"]);
            $nodes = node_load($nids[0]);

            $result->items[$key]['documentfileold'] = array();
            if($nodes && isset($nodes->field_document_file[LANGUAGE_NONE])) {
              $result->items[$key]['documentfileold'] = $nodes->field_document_file[LANGUAGE_NONE];
            }
          }
        }
      } elseif ($source->id === "kb_patrimoine_import") {
        if(isset($row["identifiantprogramme"])) {
          $key_errorlog = $id_program = $row["identifiantprogramme"];
          $rejected = variable_get($source->id . '_rejected', 0);
          if($id_program) {
            $path = 'sites/default/files/ketbmedia/doc/' . $id_program;
            if(!file_exists($path)) {
              $logging .= $id_program . '|field_id_programme|field_id_programme: ' . $id_program . '|Folder not exists in sites/default/files/ketbmedia/doc|' . 'Skip import' . "\n";
              variable_set($source->id . '_rejected', $rejected + 1);
              unset($result->items[$key]);
              continue;
            }

            $check_exist = get_program_by_id($id_program);
            if (empty($check_exist)) {
              $logging .= $id_program . '|field_id_programme|field_id_programme: ' . $id_program . '|Field id programme not exists|' . 'Skip import' . "\n";
              variable_set($source->id . '_rejected', $rejected + 1);
              unset($result->items[$key]);
              continue;
            }
          } else {
            $temp = variable_get($source->id . '_rejected', 0) + variable_get($source->id . '_updated', 0) + 1;
            $logging .= 'Row: ' . $temp . '|field_id_programme|field_id_programme: |Field id programme is mandatory|' . 'Skip import' . "\n";
            variable_set($source->id . '_rejected', $rejected + 1);
            unset($result->items[$key]);
            continue;
          }
        }

        // just use for update node, not add new.
        $list_file_id = array(
          'field_plaquette_commerciale' => 'PlaquetteCommerciale',
          'field_contrat_reservation' => 'ContratDeReservation',
          'field_etat_des_risques' => 'EtatDesRisques',
          'field_lettre_de_banque' => 'LetterBanque',
          'field_fiche_renseignement' => 'FichesDeRenseignement',
          'field_prestations_programme' => 'PrestationsDuProgramme',
          'field_mandat_gestion_locative' => 'MandatDeGestionLocative',
          'field_plan_batiment' => 'PlansDeMasse',
          'field_visuel_grande_taille' => 'VisuelGrandeTaille',
          'field_bail_commercial' => 'BailCommercial',
          'field_bon_commande_mobilier' => 'BonDeCommandeMobilier',
          'field_kit_fiscal' => 'KitFiscal',
          'field_autre_documents' => 'AutreDoc',
        );
      }

      $file_upload_fields = '';
      $file_upload_values = '';
      // Parse url for pdf file.
      foreach ($list_file_id as $key_col_file => $item_col_file) {
        $item_col_file = strtolower($item_col_file);

        $file = $row[$item_col_file];
        if (!empty($file)) {
          $path_url = $base_url . '/sites/default/files';
          if ($file[0] === '/') {
            $path_url .= $file;
          } else {
            $path_url .= '/' . $file;
          }

          $argHeader = @get_headers($path_url);
          if (!preg_match("|200|", $argHeader[0])) {
            $pos = strripos($path_url,"/");
            $path_url_uncaps = substr($path_url, 0, $pos + 1) . strtolower(substr($path_url, $pos + 1));
            $argHeader_uncaps = @get_headers($path_url_uncaps);
            if (!preg_match("|200|", $argHeader_uncaps[0])) {
              $path_url_caps = substr($path_url, 0, $pos + 1) . strtoupper(substr($path_url, $pos + 1));
              $argHeader_caps = @get_headers($path_url_caps);
              if (!preg_match("|200|", $argHeader_caps[0])) {
                $file_upload_fields .=  $key_col_file . ', ';
                $file_upload_values .=  $key_col_file . ': ' . $file . ', ';
              } else {
                $path_url = $path_url_caps;
              }
            } else {
              $path_url = $path_url_uncaps;
            }
          }

          $exists = FALSE;
          if ($source->id == 'document_import' || $source->id == 'document_import_communique_de_presse') {
            $explode_file = explode('/', $path_url);
            $file_name = $explode_file[count($explode_file) - 1];
            foreach($result->items[$key]['documentfileold'] as $document_file) {
              if($file_name == $document_file["filename"]) {
                $exists = TRUE;
                break;
              }
            }
          }

          if($exists === FALSE && $source->id != 'document_import_communique_de_presse') {
            $result->items[$key][$item_col_file] = $path_url;
          }
        }
      }

      if(!$file_upload_fields || !$file_upload_values) {
        if ($source->id == 'document_import_communique_de_presse') {
          $rejected = variable_get($source->id . '_rejected', 0);
          $logging .= $key_errorlog . '|' . rtrim($file_upload_fields, ", ") . '|' . rtrim($file_upload_values, ", ") . '|' . 'File upload not exists' . '|' . 'Skip import' . "\n";
          variable_set($source->id . '_rejected', $rejected + 1);
          unset($result->items[$key]);
          continue;
        }
        else {
          $warning = variable_get($source->id . '_warning', 0);
          $logging .= $key_errorlog . '|' . rtrim($file_upload_fields, ", ") . '|' . rtrim($file_upload_values, ", ") . '|' . 'File upload not exists' . '|' . 'Warning' . "\n";
          variable_set($source->id . '_warning', $warning + 1);
        }
      }
    }

    if ($logging) {
      createFileErrorLogTxt($file_log_name, $logging);
    }
  } elseif ($source->id === "city_feed_import") {
    foreach ($result->items as $key => $row) {
      if (!$row[1]) {
        $logging = $row[0] . '|term_name|' . 'Term name is required' . '|' . 'Skip import' . "\n";
      }

      $rejected = variable_get($source->id . '_rejected', 0);
      if ($logging) {
        variable_set($source->id . '_rejected', $rejected + 1);
        createFileErrorLogTxt($file_log_name, $logging);
      }
    }
  } elseif ($source->id === "district_feed_import") {
    foreach ($result->items as $key => $row) {
      if (!$row[2]) {
        $logging = $row[0] . '|term_name|' . 'Term name is required' . '|' . 'Skip import' . "\n";
      }

      $rejected = variable_get($source->id . '_rejected', 0);
      if ($logging) {
        variable_set($source->id . '_rejected', $rejected + 1);
        createFileErrorLogTxt($file_log_name, $logging);
      }
    }
  }
}

function get_program_by_id($id_program) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'programme')
    ->fieldCondition('field_id_programme', 'value', $id_program, '=');


  $results = $query->execute();

  if (!empty($results)) {
    return $results["node"];
  }

  return array();
}

/**
 * @todo to get node bien by bien_id
 * @param type $id_bien
 * @return type
 */
function get_bien_by_bienid($id_bien) {


  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'bien')
    ->fieldCondition('field_id_bien', 'value', $id_bien, 'like');


  $results = $query->execute();

  if (!empty($results)) {
    return $results["node"];
  }

  return array();
}

/**
 * @todo to save field field_bien_plan for node bien
 * @global type $user
 * @param type $path_pdf_file
 */
function save_bien_pdf_file($id_bien, $path_pdf_file) {
  $node = node_load($id_bien);

  $file = file_save_data(file_get_contents($path_pdf_file), file_default_scheme() . '://' . basename($path_pdf_file));
  $node->field_bien_plan[LANGUAGE_NONE][0] = array("fid" => $file->fid, 'display' => 1, 'description' => '', 'upload' => '');
  node_save($node);
}

/**
 * Implements hook_menu().
 */
function kb_feeds_menu() {
  // Add menu for #KBC-230.
  $items['admin/import_bien_pdf'] = array(
    'title' => 'Import Bien PDF',
    'description' => 'Configurate value to import Bien PDF map files',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('import_bien_pdf_admin'),
    'access arguments' => array('administer'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/feeds_errorlog'] = array(
    'title' => 'Feeds errorlog',
    'description' => 'Manage error loges of feed import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'programme_feed_import'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer content types'),
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/programme'] = array(
    'title' => 'Programme (TXT)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'programme_feed_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/parcel-feed-import'] = array(
    'title' => 'Lot',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'parcel_feed_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/maison'] = array(
    'title' => 'Maison',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'maison_feed_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/ville'] = array(
    'title' => 'Ville',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'city_feed_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/arrondissement'] = array(
    'title' => 'Arrondissement',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'district_feed_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/programme-csv'] = array(
    'title' => 'Programme (CSV)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'migration_program_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/document-patrimoine'] = array(
    'title' => 'Programme document patrimoine',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'kb_patrimoine_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/programme-video'] = array(
    'title' => 'Programme video',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'migration_program_video_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/document-import'] = array(
    'title' => 'Document import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'document_import_log'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/document-import-communique'] = array(
    'title' => 'Document import communique',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'document_import_communique_de_presse'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/import-bien-pdf'] = array(
    'title' => 'Import bien pdf',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'import_bien_pdf'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/partenaire'] = array(
    'title' => 'Partenaire import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'partenaire_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['admin/reports/feeds_errorlog/partenaire-programme'] = array(
    'title' => 'Partenaire programme import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'partenaire_programme_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );

  $items['feeds-errorlog/delete/%'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_feeds_errorlog_confirm_form', 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer content types'),
  );

  $items['feeds-errorlog/download/%'] = array(
    'title' => 'Import',
    'page callback' => 'download_feeds_errorlog',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer content types'),
  );

  $items['admin/reports/feeds_errorlog/habiteo_programme'] = array(
    'title' => 'Habiteo Programme',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'habiteo_programme'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );
  $items['admin/reports/feeds_errorlog/habiteo_bien'] = array(
    'title' => 'Habiteo Bien',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'habiteo_bien'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );
  $items['admin/reports/feeds_errorlog/migration_bien_import'] = array(
    'title' => 'Migration bien import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('feeds_errorlog_form', 'migration_bien_import'),
    'access arguments' => array('administer content types'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'kb_feeds.pages.inc',
  );


  return $items;
}

/**
 * Implements hook_admin().
 * Add setting page for #KBC-230
 */
function import_bien_pdf_admin() {
  $form['field_tabs'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['setting'] = array(
    '#type' => 'fieldset',
    '#title' => t('Import bien pdf Settings'),
    '#group' => 'field_tabs',
  );


  $form['setting']['dir_parent'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory parent'),
    '#default_value' => variable_get('import_bien_pdf_dir_parent', 'lot_plan/'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['actions']['import_pdf'] = array(
    '#type' => 'button',
    '#value' => t('Import PDF'),
    '#executes_submit_callback' => TRUE,
    '#name' => 'op_import_bien_pdf',
  );

  return $form;
}

/**
 * Implements hook_admin_submit().
 * Submit form for #KBC-230
 */
function import_bien_pdf_admin_submit() {

  if (isset($_REQUEST["op_import_bien_pdf"])) { // Action import bien pdf map files.
    $dir_parent = variable_get('import_bien_pdf_dir_parent');

    if (empty($dir_parent)) {
      drupal_set_message(t('Please enter field "Directory parent" first'), 'error');
    } else {
      batch_set(import_bien_pdf_batch_operation());
    }
  } else {  // Action save settings.
    $dir_parent = $_REQUEST['dir_parent'];

    if (!empty($dir_parent) && $dir_parent[0] == '/') {
      $dir_parent = substr($dir_parent, 1, -1);
    }

    if (!empty($dir_parent) && $dir_parent[strlen($dir_parent) - 1] != '/') {
      $dir_parent .= '/';
    }

    variable_set('import_bien_pdf_dir_parent', $dir_parent);

    drupal_set_message(t('Save data successful'));
  }
}

/**
 * Batch operation: import bien pdf.
 * #KBC-230
 */
function import_bien_pdf_batch_operation() {
  drupal_set_message('Updating Bien Nodes');

  // Build the list of operation functions and function arguments.
  $dir_parent = variable_get('import_bien_pdf_dir_parent');
  $operations = array();
  $base_path = DRUPAL_ROOT . '/sites/default/files/' . $dir_parent;

  $file_log_name = 'import_bien_pdf_log_' . date('Y-m-d_H-i-j') . '.txt';
  variable_set('import_bien_pdf_log_name', $file_log_name);
  variable_set('import_bien_pdf_processed', 0);
  if (is_dir($base_path)) {
    if ($handle = opendir($base_path)) {
      /* This is the correct way to loop over the directory. */
      while (false !== ($id_program = readdir($handle))) {
        $updated = 0;
        $rejected = 0;
        $filecount = 0;
        $logging = '';
        if (is_dir($base_path . $id_program) && $id_program != '.' && $id_program != '..') {
          if(!variable_get('import_bien_pdf_' . $id_program . '_total', 0)) {
            $files = glob($base_path . $id_program . "/*");
            if ($files){
              $filecount = count($files);
            }
            variable_set('import_bien_pdf_' . $id_program . '_total', $filecount);
          }
          $program = get_program_by_id($id_program);
          if (!empty($program)) {
            $operations[] = array('import_bien_pdf_batch_operation_process_per_dir', array(array('program' => $program, 'id_program' => $id_program)));
          } else {
            // Write log file: id_program: $id_program does not exist.
            $logging .= $id_program . '|id_program|id_program does not exist' . '| Skip imported' . "\n";
            variable_set('import_bien_pdf_' . $id_program . '_rejected', $filecount);
          }
        }

        createFileErrorLogTxt($file_log_name, $logging);
      }

      closedir($handle);
    }
  } else {
    // Write log file: $base_path . "folder does not exist".
    $logging .= $base_path . '||' . 'Folder root does not exist' . '| Skip imported' . "\n";
    createFileErrorLogTxt($file_log_name, $logging);
  }

  // Build the batch instructions.
  $batch = array(
    'operations' => $operations,
    'finished' => 'import_bien_pdf_batch_operation_finished',
  );

  return $batch;
}

function import_bien_pdf_batch_operation_process($data, &$context) {
  $context['results'][] = t('Node @bien is updating', array('@bien' => $data["node_id"]));
  $context['message'] = t('Processing bien_id @title', array('@title' => $data["bien_id"]));

  save_bien_pdf_file($data["node_id"], $data["path_pdf"]);
}

function import_bien_pdf_batch_operation_process_per_dir($data, &$context) {
  global $base_url;
  $logging = '';
  $id_program = $data['id_program'];
  $dir_parent = variable_get('import_bien_pdf_dir_parent');
  $base_path = DRUPAL_ROOT . '/sites/default/files/' . $dir_parent;
  $base_path_pdf = $base_url . '/sites/default/files/' . $dir_parent;
  $context['results'][] = t('Bien of programme @programme is updating', array('@programme' => $data['program']->nid));
  $context['message'] = t('Processing bien of programme_id @programme_id', array('@programme_id' => $id_program));
  $updated = 0;
  $rejected = 0;
  $file_log_name = variable_get('import_bien_pdf_log_name', '');
  $reset_sleep = 0;
  $processed = variable_get('import_bien_pdf_processed', 0);
// Load all pdf file in folder program.
  if ($handle_pdf_files = opendir($base_path . $id_program)) {
    while (false !== ($pdf_file = readdir($handle_pdf_files))) {
      if (is_file($base_path . $id_program . '/' . $pdf_file) && $pdf_file != '.' && $pdf_file != '..') {
        $file_name = explode('_', $pdf_file);
        $idbien_extension = explode('.', $file_name[count($file_name) - 1]);
        $id_bien = $idbien_extension[0];
        $extension_file = $idbien_extension[1];

        // Just get pdf file.
        if (strtolower($extension_file) == 'pdf') {
          $node_biens = get_bien_by_bienid($id_program . '-%-' . $id_bien);
          if (!empty($node_biens)) {
            // Sometime we will find more than 1 item.
            foreach ($node_biens as $item_bien) {
              $path_pdf = $base_path_pdf . $id_program . '/' . $pdf_file;
              $updated += 1;
              variable_set('import_bien_pdf_' . $id_program . '_updated', $updated);
//              $operations[] = array('import_bien_pdf_batch_operation_process', array($data));
              save_bien_pdf_file($item_bien->nid, $path_pdf);
              $processed++;
            }
          } else {
            // Write log file : id_bien $id_bien does not exist.
            $logging .= $id_program . '-%-' . $id_bien . '|id_bien|bien_id does not exist' . '| Skip imported' . "\n";
            $rejected += 1;
            variable_set('import_bien_pdf_' . $id_program . '_rejected', $rejected);
          }
        } else {
          $logging .= $id_program . '||File extension must to pdf' . '| Skip imported' . "\n";
          $rejected += 1;
          variable_set('import_bien_pdf_' . $id_program . '_rejected', $rejected);
        }
      }
      $reset_sleep++;
      if ($reset_sleep == 50) {
        sleep(5);
        $reset_sleep = 0;
      }
    }
    closedir($handle_pdf_files);
  }
  createFileErrorLogTxt($file_log_name, $logging);
  $total_rows = variable_get('import_bien_pdf_' . $id_program . '_total', 0);
  $updated = variable_get('import_bien_pdf_' . $id_program . '_updated', 0);
  $rejected = variable_get('import_bien_pdf_' . $id_program . '_rejected', 0);

  if($file_log_name && ($total_rows || $updated || $rejected)) {
    $logging = '/**' . "\n";
    $logging .= ' * ' . 'Importer: Import bien pdf' . "\n";
    $logging .= ' * ' . 'Programme ID: ' . $id_program . "\n";
    $logging .= ' * ' . 'Total rows: ' . $total_rows . "\n";
    $logging .= ' * ' . 'Imported: ' . $updated . ' (created: 0 - ' . 'updated: ' . $updated . ' - skipped: 0)' . "\n";
    $logging .= ' * ' . 'Rejected: ' . $rejected . "\n";
    $logging .= ' */' . "\n";
    createFileErrorLogTxt($file_log_name, $logging);
    variable_del('import_bien_pdf_' . $id_program . '_total');
    variable_del('import_bien_pdf_' . $id_program . '_updated');
    variable_del('import_bien_pdf_' . $id_program . '_rejected');
  }
  variable_set('import_bien_pdf_processed', $processed);
}

/**
 * @todo Batch finished
 */
function import_bien_pdf_batch_operation_finished($success, $results, $operations) {
  kb_migration_logging ('migration : finish import_bien_pdf');
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    $processed = variable_get('import_bien_pdf_processed', 0);
    drupal_set_message(t('@count Node Bien processed.', array('@count' => $processed)));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
  $kb_migration_status = get_migration_status();
  if (isset($kb_migration_status['start_migration']) && $kb_migration_status['start_migration'] == 1) {
    if ($success) {
      $kb_migration_status['import_bien_pdf_status'] = 1;
    }
    else {
      $kb_migration_status['import_bien_pdf_status'] = -1;
    }
    set_migration_status($kb_migration_status);
    sleep(15);
    rules_invoke_event('migration_importer_finish', 'import_bien_pdf');
  }
}

/**
 * Validate field when import file by feeds.
 * @param type $validates
 * @param type $item
 * @param type $entity
 * @return error_log
 */
function validateFieldInFileImportFeeds($validates, $item, $entity, $key_id = 0, $default = '') {
  $logging = '';
  $key_log = !empty($item[$key_id]) ? $item[$key_id] : $item[$key_id]+1;
  $error_log = $key_log . '|';

  $error_log_field = '';
  $error_term_field = '';
  $error_checkbox_field = '';
  $error_date_field = '';
  $error_text_box_field = '';
  $error_custom_trimestre_options_field = '';
  $error_datetime_programe_field = '';
  $error_custom_partenaire_export_options_field = '';
  $error_primary_key_field = '';
  $error_file_upload_field = '';


  $error_log_field_warning = '';
  $error_term_field_warning = '';
  $error_checkbox_field_warning = '';
  $error_text_box_field_warning = '';
  $error_custom_trimestre_options_field_warning = '';
  $error_datetime_programe_field_warning = '';
  $error_custom_echelle_options_field_warning = '';

  $value_log_field = '';
  $value_term_field = '';
  $value_checkbox_field = '';
  $value_date_field = '';
  $value_text_box_field = '';
  $value_custom_trimestre_options_field = '';
  $value_datetime_programe_field = '';
  $value_custom_echelle_options_field = '';
  $value_custom_partenaire_export_options_field = '';
  $value_primary_key_field = '';
  $value_file_upload_field = '';

  foreach ($validates as $type => $fields) {
    switch ($type) {
      case 'term_name':
      case 'term_name_warning':
      case 'term_field_id':
      case 'term_field_id_warning':
        foreach ($fields as $key => $field_name) {
          $field = $entity->$field_name;
          if (trim($item[$key]) == "" || (trim($item[$key]) && !isset($field[LANGUAGE_NONE][0]['tid']))) {
            if($type == 'term_field_id' || $type == 'term_name') {
              $error_term_field .= $field_name . ',';
              $value_term_field .= $field_name . ': ' . $item[$key] . ', ';
            } elseif($type == 'term_field_id_warning' || $type == 'term_name_warning') {
              if(trim($item[$key]) != "") {
                $error_term_field_warning .= $field_name . ',';
                $value_term_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          }
        }

        break;
      case 'entity_id':
        foreach ($fields as $key => $field_name) {
          $field = $entity->$field_name;
          if (trim($item[$key]) && !isset($field[LANGUAGE_NONE][0]['target_id'])) {
            $error_term_field .= $field_name . ',';
            $value_term_field .= $field_name . ': ' . $item[$key] . ', ';
          }
        }

        break;

      case 'number_warning':
      case 'number':
        foreach ($fields as $key => $field_name) {
          $field = $entity->$field_name;
          if (isset($item[$key]) && ($item[$key] != "0" || $item[$key] != 0)) {
            if(!empty($item[$key])) {
              if (!is_numeric($item[$key])) {
                if($type == 'number') {
                  $error_log_field .= $field_name . ',';
                  $value_log_field .= $field_name . ': ' . $item[$key] . ', ';
                } elseif($type == 'number_warning') {
                  $error_log_field_warning .= $field_name . ',';
                  $value_log_field .= $field_name . ': ' . $item[$key] . ', ';
                }

              } else {
                $number = (int) $item[$key];
                if ($field_name == 'field_caracteristique_balcon') {
                  $number = $item[$key];
                }
                if ($number == 0) {
                  $error_log_field .= $field_name . ',';
                  $value_log_field .= $field_name . ': ' . $item[$key] . ', ';
                }
              }
            } else {
              if($type == 'number') {
                $error_log_field .= $field_name . ',';
                $value_log_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          }
        }

        break;

      case 'date_time':
        foreach ($fields as $key => $field_name) {
          $field = $entity->$field_name;
          if (isset($item[$key]) && trim($item[$key])) {
            if (!isset($field[LANGUAGE_NONE][0]['value'])) {
              $error_date_field .= $field_name . ',';
              $value_date_field .= $field_name . ': ' . $item[$key] . ', ';
            } else {
              if (!preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1]) 00:00:00$/", $item[$key])) {
                $error_date_field .= $field_name . ',';
                $value_date_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          }
        }

        break;

      case 'check_box':
      case 'check_box_warning':
        foreach ($fields as $key => $field_name) {
          if ($item[$key] != "0" || $item[$key] != 0) {
            if(isset($item[$key]) && !empty($item[$key])) {
              if(!is_numeric($item[$key]) || !in_array((int)$item[$key], array(0,1))) {
                if($type == 'check_box') {
                  $error_checkbox_field .= $field_name . ',';
                  $value_checkbox_field .= $field_name . ': ' . $item[$key] . ', ';
                } elseif($type == 'check_box_warning') {
                  $error_checkbox_field_warning .= $field_name . ',';
                  $value_checkbox_field .= $field_name . ': ' . $item[$key] . ', ';
                }
              }
            } else {
              if($type == 'check_box') {
                $error_checkbox_field .= $field_name . ',';
                $value_checkbox_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          }
        }

        break;

      case 'text_box':
      case 'text_box_warning':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && !trim($item[$key])) {
            if($type == 'text_box') {
              $error_text_box_field .= $field_name . ',';
              $value_text_box_field .= $field_name . ': ' . $item[$key] . ', ';
            } elseif ($type == 'text_box_warning') {
              $error_text_box_field_warning .= $field_name . ',';
              $value_text_box_field .= $field_name . ': ' . $item[$key] . ', ';
            }
          }
        }

        break;

      case 'primary_key':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && !trim($item[$key])) {
            $error_primary_key_field .= $field_name . ',';
            $value_primary_key_field .= $field_name . ': ';
          }
        }

        break;
      case 'custom_trimestre_options':
      case 'custom_trimestre_options_warning':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && trim($item[$key])) {
            if(!in_array((int)$item[$key], array(1,2,3,4))) {
              if($type == 'custom_trimestre_options') {
                $error_custom_trimestre_options_field .= $field_name . ',';
                $value_custom_trimestre_options_field .= $field_name . ': ' . $item[$key] . ', ';
              } elseif ($type == 'custom_trimestre_options_warning') {
                $error_custom_trimestre_options_field_warning .= $field_name . ',';
                $value_custom_trimestre_options_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          } else {
            if($type == 'custom_trimestre_options') {
              $error_custom_trimestre_options_field .= $field_name . ',';
              $value_custom_trimestre_options_field .= $field_name . ': ' . $item[$key] . ', ';
            }
          }
        }

        break;

      case 'custom_partenaire_export_options':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && trim($item[$key])) {
            if(!in_array((int)$item[$key], array(1,2,3))) {
              if($type == 'custom_partenaire_export_options') {
                $error_custom_partenaire_export_options_field .= $field_name . ',';
                $value_custom_partenaire_export_options_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          } else {
            if($type == 'custom_partenaire_export_options') {
              $error_custom_partenaire_export_options_field .= $field_name . ',';
              $value_custom_partenaire_export_options_field .= $field_name . ': ' . $item[$key] . ', ';
            }
          }
        }

        break;
      case 'custom_echelle_options_warning':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && trim($item[$key])) {
            if(!in_array($item[$key], array('A', 'B', 'Void'))) {
              $error_custom_echelle_options_field_warning .= $field_name . ',';
              $value_custom_echelle_options_field .= $field_name . ': ' . $item[$key] . ', ';
            }
          }
        }

        break;

      case 'date_time_programme':
      case 'date_time_programme_warning':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && trim($item[$key])) {
            if(!strtotime($item[$key])) {
              if($type == 'date_time_programme') {
                $error_datetime_programe_field .= $field_name . ',';
                $value_datetime_programe_field .= $field_name . ': ' . $item[$key] . ', ';
              } elseif($type == 'date_time_programme_warning') {
                $error_datetime_programe_field_warning .= $field_name . ',';
                $value_datetime_programe_field .= $field_name . ': ' . $item[$key] . ', ';
              }
            }
          } else {
            if($type == 'date_time_programme') {
              $error_datetime_programe_field .= $field_name . ',';
              $value_datetime_programe_field .= $field_name . ': ' . $item[$key] . ', ';
            }
          }
        }

        break;

      case 'file_upload':
        foreach ($fields as $key => $field_name) {
          if(isset($item[$key]) && $item[$key]) {

          }
        }
        break;
    }
  }

  // Skip import
  if ($error_term_field) {
    $logging .= $error_log . rtrim($error_term_field, ',') . '|' . rtrim($value_term_field, ', ') . '|' . 'Term value not mapping' . '|' . 'Skip import' . "\n";
  }

  if ($error_log_field) {
    $logging .= $error_log . rtrim($error_log_field, ',') . '|' . rtrim($value_log_field, ', ') . '|' . 'Wrong format' . '|' . 'Skip import' . "\n";
  }

  if ($error_date_field) {
    $logging .= $error_log . rtrim($error_date_field, ',') .  '|' . rtrim($value_date_field, ', ') . '|' . 'Datetime wrong format' . '|' . 'Skip import' . "\n";
  }

  if ($error_checkbox_field) {
    $logging .= $error_log . rtrim($error_checkbox_field, ',') .  '|' . rtrim($value_checkbox_field, ', ') . '|' . 'Checkbox must is number(0,1)' . '|' . 'Skip import' . "\n";
  }

  if ($error_text_box_field) {
    $logging .= $error_log . rtrim($error_text_box_field, ',') .  '|' . rtrim($value_text_box_field, ', ') . '|' . 'Fields is mantory' . '|' . 'Skip import' . "\n";
  }

  if ($error_custom_trimestre_options_field) {
    $logging .= $error_log . rtrim($error_custom_trimestre_options_field, ',') .  '|' . rtrim($value_custom_trimestre_options_field, ', ') . '|' . 'Trimestre must is number(1,2,3,4)' . '|' . 'Skip import' . "\n";
  }

  if ($error_custom_partenaire_export_options_field) {
    $logging .= $error_log . rtrim($error_custom_partenaire_export_options_field, ',') .  '|' . rtrim($value_custom_partenaire_export_options_field, ', ') . '|' . 'Partenaire export must is TouslesprogrammesGrandpublic or TouslesprogrammesPrescripteurs or Sélectiondeprogrammes' . '|' . 'Warning' . "\n";
  }

  if ($error_datetime_programe_field) {
    $logging .= $error_log . rtrim($error_datetime_programe_field, ',') .  '|' . rtrim($value_datetime_programe_field, ', ') . '|' . 'Date time programme wrong format' . '|' . 'Skip import' . "\n";
  }

  if ($error_primary_key_field) {
    $temp = variable_get($entity->feeds_item->id . '_rejected', 0) + variable_get($entity->feeds_item->id . '_updated', 0) + 1;
    $logging .= 'Rows: ' . $temp . '|' . rtrim($error_primary_key_field, ',') .  '|' . rtrim($value_primary_key_field, ', ') . '|' . 'Primary key is mandatory' . '|' . 'Skip import' . "\n";
  }

  // Warning
  if($error_term_field_warning) {
    $logging .= $error_log . rtrim($error_term_field_warning, ',') .  '|' . rtrim($value_term_field, ', ') . '|' . 'Term value not mapping' . '|' . 'Warning' . "\n";
  }

  if($error_log_field_warning) {
    $logging .= $error_log . rtrim($error_log_field_warning, ',') .  '|' . rtrim($value_log_field, ', ') . '|' . 'Wrong format' . '|' . 'Warning' . "\n";
  }

  if ($error_checkbox_field_warning) {
    $logging .= $error_log . rtrim($error_checkbox_field_warning, ',') .  '|' . rtrim($value_checkbox_field, ', ') . '|' . 'Checkbox must is number(0,1)' . '|' . 'Warning' . "\n";
  }

  if ($error_text_box_field_warning) {
    $logging .= $error_log . rtrim($error_text_box_field_warning, ',') .  '|' . rtrim($value_text_box_field, ', ') . '|' . 'Fields is empty' . '|' . 'Warning' . "\n";
  }

  if ($error_custom_trimestre_options_field_warning) {
    $logging .= $error_log . rtrim($error_custom_trimestre_options_field_warning, ',') .  '|' . rtrim($value_custom_trimestre_options_field, ', ') . '|' . 'Trimestre must is number(1,2,3,4)' . '|' . 'Warning' . "\n";
  }

  if ($error_datetime_programe_field_warning) {
    $logging .= $error_log . rtrim($error_datetime_programe_field_warning, ',') .  '|' . rtrim($value_datetime_programe_field, ', ') . '|' . 'Date time programme wrong format' . '|' . 'Warning' . "\n";
  }

  if ($error_custom_echelle_options_field_warning) {
    $logging .= $error_log . rtrim($error_custom_echelle_options_field_warning, ',') .  '|' . rtrim($value_custom_echelle_options_field, ', ') . '|' . 'Echelle must is "A" Or "B" Or "Void"' . '|' . 'Warning' . "\n";
  }

  return $logging;
}

/**
 * Create file Error Log (.txt)
 * @param type $file_log_name
 * @param type $logging
 * @param type $uri
 */
function createFileErrorLogTxt($file_log_name, $logging, $uri = 'private://feeds/log/') {
  $prepare_file = file_prepare_directory($uri, FILE_CREATE_DIRECTORY);
  if ($prepare_file) {
    $path = drupal_realpath($uri . $file_log_name);
    $data = '';
    if (file_exists($path)) {
      $data = file_get_contents($path);
    }
    $logging .= $data;
    drupal_chmod($uri);
    file_save_data($logging, $uri . $file_log_name, FILE_EXISTS_REPLACE);
  }
}

function delete_feeds_errorlog_confirm_form($form, $form_state, $file_name) {
  $form['file_name'] = array(
    '#type' => 'value',
    '#value' => $file_name,
  );

  return confirm_form($form, t('Are you sure you want to change the availability?'), 'here_goes_your_backurl_for_cancel_link');
}

function delete_feeds_errorlog_confirm_form_submit($form, $form_state) {
  $file_name = $form_state['values']['file_name'];
  delete_feeds_errorlog($file_name);
}

function delete_feeds_errorlog($file_name) {
  $path = "private://feeds/log";
  if (file_exists($path)) {
    $filePath = $path . '/' . $file_name;
    if ($filePath) {
      unlink($filePath);
    }
  }
}

function download_feeds_errorlog($file_name) {
  $path = "private://feeds/log";
  if (file_exists($path)) {
    $filePath = $path . '/' . $file_name;
    if ($filePath) {
      if (file_exists($filePath)) {
        // set headers push to download the zip
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
        header("Cache-Control: public");
        header('Content-type: application/octet-stream');
        header("Content-Transfer-Encoding: Binary");
        header('Content-Disposition: attachment; filename="' . $file_name . '"');
        header("Content-Length: " . filesize($filePath));

        $fp = @fopen($filePath, "rb");
        if ($fp) {
          while (!feof($fp)) {
            echo fread($fp, 8192);
            flush();
            if (connection_status() != 0) {
              @fclose($filePath);
              die();
            }
          }
          @fclose($filePath);
        }
        //unlink($filePath);
      }
    }
  }
}

function kb_feeds_feeds_after_import(FeedsSource $source) {
  //$config_en = isset($source->getConfig()["KbEncodingCSVParser"]["no_headers"]) ? $source->getConfig()["KbEncodingCSVParser"]["no_headers"] : 0;
  //$config_feeds = isset($source->getConfig()["KbFeedsCSVParser"]["no_headers"]) ? $source->getConfig()["KbFeedsCSVParser"]["no_headers"] : 'NULL';
  //$config_doc = isset($source->getConfig()["KbDocCommuniqueCSVParser"]["no_headers"]) ? $source->getConfig()["KbDocCommuniqueCSVParser"]["no_headers"] : 'NULL';

  $state = $source->state(FEEDS_PROCESS);
  $skipped = $state->skipped;
  $created = $state->created;
  $updated = $state->updated;
  $warning = variable_get($source->importer()->id . '_warning', 0);
  $rejected = variable_get($source->importer()->id . '_rejected', 0);
  $file_log_name = variable_get($source->importer()->id . '_log_name');
  $total_rows_fileimport = variable_get($source->importer()->id . '_total', 0);
//  if($config_feeds == 0 && $config_doc == 0 && $config_feeds != 'NULL' && $config_doc != 'NULL') {
//    $total_rows_fileimport -= 1;
//  }

  $imported = $created + $updated;
  if($file_log_name && ($total_rows_fileimport || $imported || $rejected)) {
    $logging = '/**' . "\n";
    $logging .= ' * ' . 'Importer: ' . ucfirst(str_replace('_', ' ', $source->importer()->id)) . "\n";
    $logging .= ' * ' . 'Total rows: ' . $total_rows_fileimport . "\n";
    $logging .= ' * ' . 'Imported: ' . $imported . ' (created: ' . $created . ' - ' . 'updated: ' . $updated . ' - ' . 'skipped: ' . $skipped .')' . "\n";
    $logging .= ' * ' . 'Rejected: ' . $rejected . "\n";
    $logging .= ' * ' . 'Total rows warning in file: ' . $warning .  "\n";
    $logging .= ' */' . "\n";

    createFileErrorLogTxt($file_log_name, $logging);
  }

  variable_del($source->importer()->id . '_updated');
  variable_del($source->importer()->id . '_warning');
  variable_del($source->importer()->id . '_rejected');
  variable_del($source->importer()->id . '_log_name');
  variable_del($source->importer()->id . '_total');
}


function kb_feeds_feeds_after_save(FeedsSource $source, $entity, $item, $entity_id) {
  $state = $source->state(FEEDS_PROCESS);
  if($state->updated > 0) {
    $updated = $state->updated + 1;
  }

  variable_set($entity->feeds_item->id . '_updated', $updated);
}

function createLogFileFeedsImportNotExists($file_import, $importer_id) {
  $header_response = get_headers($file_import, 1);
  if (strpos($header_response[0], "404") !== false) {
    if($importer_id) {
      $file_log_name = $importer_id . '_log_' . date('Y-m-d_H-i-s') . '.txt';
      if(variable_get($importer_id . '_log_name', '')) {
        $file_log_name  = variable_get($importer_id . '_log_name');
      }

      $logging = '/**' . "\n";
      $logging .= ' * ' . 'Importer: ' . ucfirst(str_replace('_', ' ', $importer_id)) . "\n";
      $logging .= ' */' . "\n";
      $logging .= 'Path: ' . $file_import . ' does not exists' . "\n";
      createFileErrorLogTxt($file_log_name, $logging);
    }

    throw new Exception(t('Path @file_import is not exists.', array('@file_import' => $file_import)));
  }
}

/**
 * Delete all variable was used in feed importer
 * @param objectClass $state
 * @param FeedsSource $source
 */
function delVariablesUsedInFeedImporter($state, $source) {
  if($state->progress == 1) {
    variable_del($source->importer()->id . '_updated');
    variable_del($source->importer()->id . '_warning');
    variable_del($source->importer()->id . '_rejected');
    variable_del($source->importer()->id . '_log_name');
    variable_del($source->importer()->id . '_total');
  }
}