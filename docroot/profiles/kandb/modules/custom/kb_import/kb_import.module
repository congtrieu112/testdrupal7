<?php

/**
 * Implements hook_menu().
 */
function kb_import_menu() {
  $items = array();

  $items['delete-nodes'] = array(
    'title' => 'Import',
    'page callback' => 'action_delete_nodes',
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['admin/config/kb-import'] = array(
    'title' => 'Kandb import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('config_ftp_page'),
    'file' => 'kb_import.admin.inc',
    'access callback' => TRUE,
  );
  $items['admin/config/kb-import/ftp-files'] = array(
    'title' => 'Configure ftp to get files',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['migration'] = array(
    'title' => 'Migration import',
    'description' => 'Run migration import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_impor_admin_form'),
    'access arguments' => array('administer'),
    'file' => 'kb_import.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/reports/migration_errorlog'] = array(
    'title' => 'migration errorlog',
    'description' => 'Manage error loges of migration import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('migration_errorlog_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('administer content types'),
    'file' => 'kb_import.pages.inc',
  );
  $items['migration-errorlog/delete/%'] = array(
    'title' => 'Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_migration_errorlog_confirm_form', 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer content types'),
  );

  $items['migration-errorlog/download/%'] = array(
    'title' => 'Import',
    'page callback' => 'download_migration_errorlog',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer content types'),
  );
  return $items;
}

function action_delete_nodes() {
  $KBAPI = new KAndBAPI();
  $results = $KBAPI->getListNodeByBundle('node', 'bien');

  foreach ($results as $id => $value) {
    $nids[] = $id;
  }

  if (!empty($nids)) {
    node_delete_multiple($nids);
    drupal_set_message(t('Deleted %count nodes.', array('%count' => count($nids))));
  }
}

/**
 * Implements hook_cronapi
 * @param type $op
 * @param type $job
 * @return string
 */
function kb_import_cronapi($op, $job = NULL) {
//Starting daily import
  $items['kandb_starting_daily_import'] = array(
    'description' => 'Starting daily import',
    'rule' => '0 3 * * 1-5',
    'callback' => 'kb_starting_daily_import' ,
  );
  $items['kandb_start_migration_import'] = array(
    'description' => 'Start migration import',
    'rule' => '0 18 * * 1-5',
    'callback' => 'kb_start_migration_import' ,
  );

  return $items;
}

function kb_import_feeds_after_import($source) {
$kb_daily_import_importers = array(
  'city_feed_import',
  'district_feed_import',
  'maison_feed_import',
  'programme_feed_import',
  'parcel_feed_import',
);
  $id = $source->id;
  $status = 0;
  $kb_daily_import_status = get_daily_import_status ();
  if (in_array($id, $kb_daily_import_importers) && isset($kb_daily_import_status['start_daily_import']) && $kb_daily_import_status['start_daily_import'] == 1) {
//Set status value
    if (isset($source->exception) || !_check_successful_importer($source)) {
      $status = -1;
    }
    else {
      $status = 1;
    }
    $kb_daily_import_status[$id . '_status'] = $status;
    set_daily_import_status($kb_daily_import_status);
//Call event daily_import_importer_finish
    rules_invoke_event('daily_import_importer_finish', $id);
  }
  $kb_migration_status = get_migration_status();
  if (isset($kb_migration_status['start_migration']) && $kb_migration_status['start_migration'] == 1) {
    if (isset($source->exception) || !_check_successful_importer($source)) {
      $status = -1;
    }
    else {
      $status = 1;
    }
    $kb_migration_status[$id . '_status'] = $status;
    set_migration_status($kb_migration_status);
    kb_migration_logging ('migration : finish ' . $id);
    rules_invoke_event('migration_importer_finish', $id);
  }
}

function kb_starting_daily_import(){
  $kb_migration_status = get_migration_status();
  if ($kb_migration_status['start_migration'] == 1) {
    kb_daily_import_logging ('daily-import: can not start : migration import running');
    return;
  }
  module_load_include('inc', 'kb_import', 'kb_import.GettingFiles');
  $start_getting_file = kb_import_ftp_get_files();
  if($start_getting_file) {
  //Set variable's status
    $kb_daily_import_status = daily_import_status_default();
    $kb_daily_import_status['start_daily_import'] = 1;
    set_daily_import_status ($kb_daily_import_status);
    set_migration_status($kb_migration_status);
  //Call event starting_daily_import
    rules_invoke_event('starting_daily_import');
  }
}
function kb_start_migration_import($getting_file = TRUE){
  $kb_daily_import_status = get_daily_import_status();
  if ($kb_daily_import_status['start_daily_import'] == 1) {
    kb_migration_logging ('migration : can not start : daily import running');
    return;
  }
  module_load_include('inc', 'kb_import', 'kb_import.GettingFiles');
  $start_getting_file = TRUE;
  if ($getting_file !== 0) {
    $start_getting_file = kb_import_ftp_get_files();
  }
  if($start_getting_file) {
    if ($getting_file !== 0) {
      kb_migration_logging ('migration : get files via FTP success');
    }
  //Flush data
  $flushed = kb_flush_data ();
  $logging = '';
  if (isset($flushed['node'])) {
    foreach ($flushed['node'] as $type => $total_nodes) {
      $logging .= 'migration : deleted ' . $total_nodes . ' nodes ' . $type . "\n";
    }
  }
  if (isset($flushed['term']) && $flushed['term'] > 0) {
    foreach ($flushed['term'] as $type => $total_terms) {
      $logging .= 'migration : deleted ' . $total_terms . ' terms ' . $type . "\n";
    }
  }
  if ($logging != '') {
    kb_migration_logging (rtrim($logging, "\n"));
  }
  //Set variable's status
    $kb_migration_status = migration_status_default();
    $kb_migration_status['start_migration'] = 1;
    set_migration_status ($kb_migration_status);
    kb_migration_logging ('migration : start migration');
  //Call event start_migration_import
    set_daily_import_status ($kb_daily_import_status);
    rules_invoke_event('start_migration_import');
  }
}

function kb_daily_import_importer_list() {
  $importer_ops = array();
  $importers = feeds_importer_load_all(TRUE);
  foreach($importers as $k => $importer){
    $name = $importer->config['name'];
    $importer_ops[$k] = $name;
  }
  $importer_ops['import_bien_pdf'] = 'Import bien PDF';
  return $importer_ops;
}
function get_daily_import_status () {
  return variable_get('kb_daily_import_status', daily_import_status_default());
}
function get_migration_status () {
  return variable_get('kb_migration_status', migration_status_default());
}
function set_daily_import_status ($kb_daily_import_status) {
  variable_set('kb_daily_import_status', $kb_daily_import_status);
}
function set_migration_status ($kb_migration_status) {
  variable_set('kb_migration_status', $kb_migration_status);
}
function daily_import_status_default() {
  $kb_daily_import_status = array(
    'start_daily_import' => 0,
    'city_feed_import_status' => 0,
    'district_feed_import_status' => 0,
    'maison_feed_import_status' => 0,
    'programme_feed_import_status' => 0,
    'parcel_feed_import_status' => 0,
  );
  return $kb_daily_import_status;
}
function migration_status_default() {
  $kb_migration_status = array(
    'start_migration' => 0,
    'city_feed_import_status' => 0,
    'district_feed_import_status' => 0,
    'maison_feed_import_status' => 0,
    'migration_program_import_status' => 0,
    'kb_patrimoine_import_status' => 0,
    'parcel_feed_import_status' => 0,
    'import_bien_pdf_status' => 0,
    'migration_bien_import_status' => 0,
    'migration_program_video_import_status' => 0,
    'document_import_communique_de_presse_status' => 0,
    'document_import_status' => 0,
    'migration_program_status' => 0,
    'migration_bien_status' => 0,
    'migration_document_status' => 0,
  );
  return $kb_migration_status;
}
function _check_successful_importer ($feeds_source) {
  $status = FALSE;
  if (isset($feeds_source->state['parse']->total) && $feeds_source->state['parse']->total > 0) {
    if ($feeds_source->state['parse']->progress == 1 && $feeds_source->state['process']->progress == 1 && $feeds_source->state['fetch']->progress == 1) {
      $status = TRUE;
    }
  }
  return $status;
}
function kb_daily_import_logging ($message) {
  if(module_exists('kandb_feed') && $message != ''){
    $message .= "\n";
    $uri = 'private://daily-import-log/';
    $file_log_name = 'daily_import_log_' . date('Y-m-d') . '.txt';
    createFileErrorLogTxt($file_log_name, $message, $uri);
  }
}
function kb_migration_logging ($message) {
  if(module_exists('kandb_feed') && $message != ''){
    $message = date("Y-m-d h:i A") . "\n" . $message . "\n";
    $uri = 'private://migration/';
    $file_log_name = 'migration_log_' . date('Y-m-d') . '.txt';
    createFileErrorLogTxt($file_log_name, $message, $uri);
  }
}
function download_migration_errorlog($file_name) {
  $path = "private://migration";
  if (file_exists($path)) {
    $filePath = $path . '/' . $file_name;
    if ($filePath) {
      if (file_exists($filePath)) {
        // set headers push to download the zip
        header("Pragma: public");
        header("Expires: 0");
        header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
        header("Cache-Control: public");
        header('Content-type: application/octet-stream');
        header("Content-Transfer-Encoding: Binary");
        header('Content-Disposition: attachment; filename="' . $file_name . '"');
        header("Content-Length: " . filesize($filePath));

        $fp = @fopen($filePath, "rb");
        if ($fp) {
          while (!feof($fp)) {
            echo fread($fp, 8192);
            flush();
            if (connection_status() != 0) {
              @fclose($filePath);
              die();
            }
          }
          @fclose($filePath);
        }
        //unlink($filePath);
      }
    }
  }
}
function delete_migration_errorlog_confirm_form($form, $form_state, $file_name) {
  $form['file_name'] = array(
    '#type' => 'value',
    '#value' => $file_name,
  );
  return confirm_form($form, t('Are you sure you want to change the availability?'), 'here_goes_your_backurl_for_cancel_link');
}
function delete_migration_errorlog_confirm_form_submit($form, $form_state) {
  $file_name = $form_state['values']['file_name'];
  delete_migration_errorlog($file_name);
}

function delete_migration_errorlog($file_name) {
  $path = "private://migration";
  if (file_exists($path)) {
    $filePath = $path . '/' . $file_name;
    if ($filePath) {
      unlink($filePath);
    }
  }
}

function kb_flush_data () {
  $result = array();
  //Delete all nodes
  $nodes = array();
  $node_types = array(
    'programme',
    'bien',
    'document',
    'maison',
  );
  $query_node = db_select('node', 'n');
  $query_node->fields('n', array('nid', 'type'));
  $query_node->condition('n.type', $node_types, 'IN');
  $query_node->range(0, 1000);
  do {
    $nodes = $query_node->execute()->fetchAll();
    foreach ($nodes as $node) {
      node_delete($node->nid);
      $result['node'][$node->type]++;
    }
    if (!empty ($nodes)) {
      sleep(15);
    }
  } while (!empty ($nodes));
  //Delete all terms
  $terms = array();
  $vocs = array(
    'arrondissement',
    'ville',
  );
  $query_term = db_select('taxonomy_term_data', 't');
  $query_term->fields('t', array('tid'));
  $query_term->leftJoin('taxonomy_vocabulary', 'voc', 'voc.vid=t.vid');
  $query_term->condition('voc.machine_name', $vocs, 'IN');
  $query_term->addField('voc', 'machine_name');
  $query_term->range(0, 1000);
  do {
    $terms = $query_term->distinct()->execute()->fetchAll();
    foreach ($terms as $term) {
      taxonomy_term_delete($term->tid);
      $result['term'][$term->machine_name]++;
    }
    if (!empty ($terms)) {
      sleep(15);
    }
  } while (!empty ($terms));
  return $result;
}