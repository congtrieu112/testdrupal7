<?php

/**
 * Implementation of hook_menu()
 * @return array
 */
function kandb_contact_menu() {

  $items = array();

  $items['admin/content/ketb/contact'] = array(
    'title' => 'Contact',
    'description' => 'Change the contact information of the contact block.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kandb_contact_admin'),
    'access arguments' => array('administer content settings'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/webform_contact'] = array(
    'title' => 'Webform Contact settings',
    'description' => 'Set ID webform for contact form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kandb_contact_webform'),
    'access arguments' => array('super admin only'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/reports/webform_submitted_data'] = array(
    'title' => 'Webform contact-list submitted data',
    'description' => 'Manage webform contact-list submitted data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webform_contact_list_submitted_data'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access download'),
  );

  $items['document_download/%'] = array(
    'title' => 'Document download',
    'description' => 'Download file after submit the webform',
    'page callback' => 'document_download',
    'page arguments' => array(1),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access download'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function kandb_contact_permission() {
  return array(
    'administer content settings' => array(
      'title' => t('Edit the content'),
      'description' => t('Provide the right to change the content on the contact blocks.'),
    ),
    'access download' => array(
      'title' => t('Access and download report'),
      'description' => t('Access the webform submit data page and download the export.'),
    ),
  );
}

/**
 * Implementation of hook_block_info()
 * @return array
 */
function kandb_contact_block_info() {
  $blocks = array();
  $blocks['contact_block_page'] = array(
    'info' => 'Contact block page',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['contact_on_summary'] = array(
    'info' => 'Contact on summary',
    'cache' => DRUPAL_CACHE_PER_PAGE,
  );
  $blocks['contact_block_with_sales_office'] = array(
    'info' => 'Contact block with sales office',
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implementation hook_block_view()
 * @param string $delta
 * @return array
 */
function kandb_contact_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'contact_block_page':
      $block['subject'] = '';
      $block['content'] = kandb_contact_block_page();
      break;
    case 'contact_on_summary':
      $block['subject'] = '';
      $block['content'] = '';
      break;
    case 'contact_block_with_sales_office':
      $block['subject'] = '';
      $block['content'] = '';
      break;
  }
  return $block;
}

/**
 * Implement hook_theme()
 */
function kandb_contact_theme($existing, $type, $theme, $path) {
  return array(
    // Contact buttons
    'contact_buttons' => array(
      'template' => 'templates/contact_buttons',
      'variables' => array(),
    ),
    'contact_block_page' => array(
      'template' => 'templates/contact_block_page',
      'variables' => array(),
    ),
    'mini_contact_block_page' => array(
      'template' => 'templates/mini_contact_block_page',
      'variables' => array(),
    ),
    'contact_block_with_sales_office' => array(
      'template' => 'templates/contact_block_with_sales_office',
      'variables' => array(),
    ),
    'contact_on_summary' => array(
      'template' => 'templates/contact_on_summary',
      'variables' => array(),
    ),
    'contact_specific_block_page' => array(
      'template' => 'templates/contact_specific_block_page',
      'variables' => array(),
    ),
  );
}

function kandb_contact_buttons($only_links = false) {
  global $base_url, $node;

  $links = array();
  $url = array();
  $webform_machine_names = array(
    '_tre_rappel_',
    'prendre_rendez_vous',
  );
  
  $link = '';
  if(!empty($_GET['q'])){
    $array_node = explode('/', $_GET['q']);
    if($array_node[0] == 'node' && !empty($array_node[1]) && is_numeric($array_node[1])) {
      $link = '?nid='.$array_node[1];
    }
  }
  foreach ($webform_machine_names as $name) {
    $webform = webform_features_machine_name_load($name);
    if ($webform) {
      $url[$webform->title] = $base_url . '/' . drupal_get_path_alias('node/' . $webform->nid);
      $links[] = theme_link(
          array(
            'text' => '<span>' . $webform->title . '</span>',
            'path' => $base_url . '/' . drupal_get_path_alias('node/' . $webform->nid).$link,
            'options' => array(
              'attributes' => array(
                'class' => array(($name == '_tre_rappel_' ? 'btn-primary btn-rounded' : 'btn-secondary btn-rounded')),
                'data-reveal-ajax' => array('true'),
                'data-reveal-id' => array('popinLeadForm'),
              ),
              'html' => TRUE,
            )
          )
      );
    }
  }

  if ($only_links)
    return $url;

  return theme('contact_buttons', array(
    'links' => $links
      )
  );
}

/**
 * Callback function
 */
function kandb_contact_block_page($is_mini_contact = FALSE) {
  $variables = array();
  $variables['content'] = kandb_contact_get_all_variables($is_mini_contact);
  $variables['content']['buttons'] = kandb_contact_buttons();

  if ($is_mini_contact) {
    return theme('mini_contact_block_page', $variables);
  }

  return theme('contact_block_page', $variables);
}

/**
 * Get all the variable defined by this module
 *
 * @return array
 *  Returns an array with
 *  variable_name => variable_value
 */
function kandb_contact_get_all_variables($is_mini_contact = FALSE) {
  if (!$is_mini_contact) {
    $variables = array(
      'kandb_contact_photo' => '',
      'kandb_contact_title' => '',
      'kandb_contact_sub_title' => '',
      'kandb_contact_faq_text' => '',
      'kandb_contact_faq_link' => '',
      'kandb_contact_numero_text' => '',
      'kandb_contact_numero_vert' => '',
    );
  }
  else {
    $variables = array(
      'kandb_contact_numero_text' => '',
      'kandb_contact_numero_vert' => '',
    );
  }


  foreach ($variables as $name => $value) {
    $variables[$name] = variable_get($name);
  }

  if (!$is_mini_contact && !empty($variables['kandb_contact_photo'])) {
    $variables['kandb_contact_photo'] = file_load($variables['kandb_contact_photo']);
    if ($wrapper = file_stream_wrapper_get_instance_by_uri($variables['kandb_contact_photo']->uri)) {
      $variables['kandb_contact_photo']->uri = $wrapper->getExternalUrl();
    }
  }

  return $variables;
}

/**
 * Admin interface
 *
 * Called from drupal_get_form
 *
 * @return mixed
 */
function kandb_contact_admin() {
  $form = array();

  $form['kandb_contact_photo'] = array(
    '#type' => 'managed_file',
    '#title' => t('Photo du block de contact (230px / 310px)'),
    '#default_value' => variable_get('kandb_contact_photo'),
    '#upload_location' => 'public://',
  );
  $form['kandb_contact_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Titre du bloc de contact'),
    '#default_value' => variable_get('kandb_contact_title'),
    '#required' => TRUE,
  );
  $form['kandb_contact_sub_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Sous titre du bloc de contact'),
    '#default_value' => variable_get('kandb_contact_sub_title'),
    '#required' => TRUE,
  );
  $form['kandb_contact_numero_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Texte avant le numéro vert'),
    '#default_value' => variable_get('kandb_contact_numero_text'),
    '#required' => TRUE,
  );
  $form['kandb_contact_numéro_vert'] = array(
    '#type' => 'textfield',
    '#title' => t('Numéro vert'),
    '#default_value' => variable_get('kandb_contact_numero_vert'),
    '#required' => TRUE,
  );
  $form['kandb_contact_faq_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Texte sur le bouton de FAQ'),
    '#default_value' => variable_get('kandb_contact_faq_text'),
    '#required' => TRUE,
  );
  $form['kandb_contact_faq_link'] = array(
    '#type' => 'textfield',
    '#title' => t('Lien vers la FAQ'),
    '#default_value' => variable_get('kandb_contact_faq_link'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

function kandb_contact_admin_validate($form, &$form_state) {
  global $user;

  // Load the file via file.fid.
  $file = file_load($form_state['values']['kandb_contact_photo']);

  // Change status to permanent.
  $file->status = FILE_STATUS_PERMANENT;

  // Save.
  file_save($file);

  // Record that the module (in this example, user module) is using the file.
  file_usage_add($file, 'user', 'user', $user->uid);
}

function kandb_contact_form_alter(&$form, $form_state, $form_id) {
  // Get webform Prendre rendez-vous.
  $webform_prendre_rendez_vous = webform_features_machine_name_load('prendre_rendez_vous');
  $webform_id_rendez_vous = isset($webform_prendre_rendez_vous->nid) ? 'webform_client_form_' . $webform_prendre_rendez_vous->nid : '';

  // Get webform Être rappelé.
  $webform_etre_rappele = webform_features_machine_name_load('_tre_rappel_');
  $webform_id_etre_rappele = isset($webform_etre_rappele->nid) ? 'webform_client_form_' . $webform_etre_rappele->nid : '';

  // Get webform avant_contactez_nous.
  $webform_avant_contactez_nous = webform_features_machine_name_load('avant_contactez_nous');
  $webform_id_avant_contactez_nous = isset($webform_avant_contactez_nous->nid) ? 'webform_client_form_' . $webform_avant_contactez_nous->nid : '';

  // Get webform telechargement_documents.
  $webform_telechargement_documents = webform_features_machine_name_load('telechargement_documents');
  $webform_id_telechargement_documents = isset($webform_telechargement_documents->nid) ? 'webform_client_form_' . $webform_telechargement_documents->nid : '';

  if ($form_id == $webform_id_avant_contactez_nous) {
    $nid = arg(1);
    if (is_numeric($nid)) {
      $avant_premiere = node_load($nid);
      if ($avant_premiere) {
        $title = isset($avant_premiere->title) ? $avant_premiere->title : '';

        $form['submitted']['nom_prog']["#default_value"] = $title;
        $form['submitted']['nom_prog']["#value"] = $title;
        $form['submitted']['nom_prog']['#type'] = 'hidden';
        $form['submitted']['ap_title']["#default_value"] = $title;
        $form['submitted']['ap_title']["#value"] = $title;
        $form['submitted']['ap_title']['#type'] = 'hidden';
      }
    }
  }

  if (($form_id == $webform_id_telechargement_documents || $form_id == $webform_id_rendez_vous || $form_id == $webform_id_etre_rappele) && isset($_SERVER["HTTP_REFERER"]) && !empty($_SERVER["HTTP_REFERER"])) {
    global $base_url;
    $referer_path = $_SERVER["HTTP_REFERER"];
    $referer_path = str_replace($base_url . '/', '', urldecode($referer_path));
    $id_referer_path = drupal_get_normal_path($referer_path);
    // Get id node from path alias
    $id_referer_path = explode('/', $id_referer_path)[1];

    // If exists path alias.
    if (is_numeric($id_referer_path)) {
      $node = node_load($id_referer_path);
      if ($node) {
        $id_programme = 0;
        $id_bien = 0;
        $program_title = '';
        $program_ville = '';
        $program_department = '';

        $programme = '';

        switch ($node->type) {
          case 'programme':
            $id_programme = (isset($node->field_id_programme[LANGUAGE_NONE][0])) ? $node->field_id_programme[LANGUAGE_NONE][0]["value"] : 0;

            $programme = $node;
            break;

          case 'bien':
            if (isset($node->field_programme[LANGUAGE_NONE][0])) {
              $programme = node_load($node->field_programme[LANGUAGE_NONE][0]["target_id"]);
              $id_programme = (isset($programme->field_id_programme[LANGUAGE_NONE][0])) ? $programme->field_id_programme[LANGUAGE_NONE][0]["value"] : 0;
            }

            //$id_programme = (isset($node->field_programme[LANGUAGE_NONE][0])) ? $node->field_programme[LANGUAGE_NONE][0]["target_id"] : 0;
            $id_bien = (isset($node->field_id_bien[LANGUAGE_NONE][0])) ? $node->field_id_bien[LANGUAGE_NONE][0]["value"] : 0;
            break;

          default:
            break;
        }

        if (!empty($programme)) {
          $program_title = $programme->title;
          if (isset($programme->field_programme_loc_ville[LANGUAGE_NONE][0])) {
            $term_id_ville = $programme->field_programme_loc_ville[LANGUAGE_NONE][0]["tid"];
            $term_ville = taxonomy_term_load($term_id_ville);
            $program_ville = $term_ville->name;
          }

          if (isset($programme->field_programme_loc_department[LANGUAGE_NONE][0])) {
            $term_id_department = $programme->field_programme_loc_department[LANGUAGE_NONE][0]["tid"];
            $term_department = taxonomy_term_load($term_id_department);
            $program_department = $term_department->field_numero_departement[LANGUAGE_NONE][0]["value"];
          }
        }

        switch ($form_id) {
          case $webform_id_rendez_vous: // Webform Prendre rendez-vous
          case $webform_id_etre_rappele:  // Webform Être rappelé
            $form['submitted']['rdv_idkl']["#default_value"] = (!empty($id_bien)) ? $id_bien : '';
            $form['submitted']['rdv_idkl']["#value"] = (!empty($id_bien)) ? $id_bien : '';
            $form['submitted']['rdv_idkl']['#type'] = 'hidden';

            $form['submitted']['rdv_idkp']["#default_value"] = (!empty($id_programme)) ? $id_programme : '';
            $form['submitted']['rdv_idkp']["#value"] = (!empty($id_programme)) ? $id_programme : '';
            $form['submitted']['rdv_idkp']['#type'] = 'hidden';

            if ($form_id == $webform_id_rendez_vous) {
              $form['submitted']['nom_prog']["#default_value"] = (!empty($program_title)) ? $program_title : '';
              $form['submitted']['nom_prog']["#value"] = (!empty($program_title)) ? $program_title : '';
              $form['submitted']['nom_prog']['#type'] = 'hidden';

              $form['submitted']['ville_prog']["#default_value"] = (!empty($program_ville)) ? $program_ville : '';
              $form['submitted']['ville_prog']["#value"] = (!empty($program_ville)) ? $program_ville : '';
              $form['submitted']['ville_prog']['#type'] = 'hidden';

              $form['submitted']['dept_prog']["#default_value"] = (!empty($program_department)) ? $program_department : '';
              $form['submitted']['dept_prog']["#value"] = (!empty($program_department)) ? $program_department : '';
              $form['submitted']['dept_prog']['#type'] = 'hidden';
            }
            break;
          case $webform_id_telechargement_documents:
            $parram = drupal_get_query_parameters();
            if ($parram['contenttype'] == 'bien') {
              $form['submitted']['ma_idkp']["#default_value"] = (!empty($id_bien)) ? $id_bien : '';
              $form['submitted']['ma_idkp']["#value"] = (!empty($id_bien)) ? $id_bien : '';
            }
            else {
              $form['submitted']['ma_idkp']["#default_value"] = (!empty($id_programme)) ? $id_programme : '';
              $form['submitted']['ma_idkp']["#value"] = (!empty($id_programme)) ? $id_programme : '';
            }

            // Include JS inline to close the popin document.
            drupal_add_js(
                'Drupal.ajax.prototype.commands.closePopin = function(ajax, response, status) {
                // Whatever you want to do. i.e. :
                jQuery(".close-reveal-modal").trigger("click");
              }', 'inline'
            );
            $form['#submit'][] = 'telechargement_documents_download_header';
            break;
          default:
            break;
        }
      }
    }
  }
}

/**
 * Implements hook_admin().
 * Add setting form contact ID
 */
function kandb_contact_webform() {
  $form['field_tabs'] = array(
    '#type' => 'vertical_tabs',
  );
  $form['setting'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contact form Settings'),
    '#group' => 'field_tabs',
  );


  $form['setting']['webform_rendez_vous'] = array(
    '#type' => 'textfield',
    '#title' => t('Webform ID Prendre rendez-vous'),
    '#default_value' => variable_get('kandb_webform_rendez_vous', 'webform_client_form_2'),
  );

  $form['setting']['webform_etre_rappele'] = array(
    '#type' => 'textfield',
    '#title' => t('Webform ID webform Être rappelé'),
    '#default_value' => variable_get('kandb_webform_etre_rappele', 'webform_client_form_1'),
  );

  $form['setting']['webform_avant_contactez_nous'] = array(
    '#type' => 'textfield',
    '#title' => t('Webform ID webform Avant première - contactez-nous'),
    '#default_value' => variable_get('kandb_webform_avant_contactez_nous', 'webform_client_form_3'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Implements hook_admin_submit().
 * Submit setting form contact ID
 */
function kandb_contact_webform_submit() {
  // Action save settings.
  $webform_rendez_vous = $_REQUEST['webform_rendez_vous'];
  $webform_etre_rappele = $_REQUEST['webform_etre_rappele'];
  $webform_avant_contactez_nous = $_REQUEST['webform_avant_contactez_nous'];

  variable_set('kandb_webform_rendez_vous', $webform_rendez_vous);
  variable_set('kandb_webform_etre_rappele', $webform_etre_rappele);
  variable_set('kandb_webform_avant_contactez_nous', $webform_avant_contactez_nous);

  drupal_set_message(t('Save data successful'));
}

function kandb_contact_form_webform_client_form_alter(&$form, $form_state, $form_id) {
  array_unshift($form['#validate'], 'kandb_webform_client_validate');
  $form['actions']['submit']['#value'] = t('Envoyer');
}

function kandb_webform_client_validate(&$form, &$form_state) {
  $values = $form_state['values'];
  if (isset($values['submitted']['row_2']['rappeler_telephone'])) {
    $telephone = preg_replace("/[0-9]/", '', $values['submitted']['row_2']['rappeler_telephone']);
    if (trim($telephone) != '') {
      form_set_error('submitted][row_2][rappeler_telephone', t('Téléphone field is number only.'));
    }
  }
  if (isset($values['submitted']['row_4']['rdv_telephone'])) {
    $telephone = preg_replace("/[0-9]/", '', $values['submitted']['row_4']['rdv_telephone']);
    if (trim($telephone) != '') {
      form_set_error('submitted][row_4][rdv_telephone', t('Téléphone field is number only.'));
    }
  }
  if (isset($values['submitted']['row_4']['ap_telephone'])) {
    $telephone = preg_replace("/[0-9]/", '', $values['submitted']['row_4']['ap_telephone']);
    if (trim($telephone) != '') {
      form_set_error('submitted][row_4][ap_telephone', t('Téléphone field is number only.'));
    }
  }
  if (isset($values['submitted']['row_4']['ma_telephone'])) {
    $telephone = preg_replace("/[0-9]/", '', $values['submitted']['row_4']['ma_telephone']);
    if (trim($telephone) != '') {
      form_set_error('submitted][row_4][ma_telephone', t('Téléphone field is number only.'));
    }
  }
}

/**
 * Show list webform submitted data and link export contact list
 */
function webform_contact_list_submitted_data($form, $form_state) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $webforms = db_select('webform', 'w')
      ->distinct()
      ->fields('w', array('nid'))
      ->condition('machine_name', array('_tre_rappel_', 'prendre_rendez_vous', 'avant_contactez_nous'), 'IN')
      ->execute()
      ->fetchAll();

  $nids = array();
  $op_type = array();
  if ($webforms) {
    foreach ($webforms as $webform) {
      $nids[] = $webform->nid;
      $term = node_load($webform->nid);
      if ($term) {
        $op_type[$webform->nid] = $term->title;
      }
    }
  }

  $results = db_select('webform_submitted_data', 'wsd')
      ->distinct()
      ->fields('wsd', array('nid', 'sid'))
      ->condition('nid', $nids, 'IN')
      //->extend('PagerDefault')->limit(2)
      ->execute()
      ->fetchAll();

  $options = array();

  $options_default = array(
    'idkp' => '',
    'idkl' => '',
    'nom_prog' => '',
    'ville_prog' => '',
    'dept_prog' => '',
    'type_contact' => '',
    'date' => '',
    'huere' => '',
    'nom' => '',
    'prenom' => '',
    'telephone' => '',
    'email' => '',
    'adresse1' => '',
    'ville' => '',
    'code_postal' => '',
    'pays' => '',
    'PROV' => '',
    'message' => '',
  );

  if ($results) {
    foreach ($results as $result) {
      $nid = $result->nid;
      $sid = $result->sid;
      $submission = webform_get_submission($nid, $sid);

      $submitted_datas = array();
      $submitted_datas['date'] = date("m/d/Y", $submission->submitted);
      $submitted_datas['huere'] = date("H:i:j", $submission->submitted);

      $node = node_load($nid);
      if ($node) {
        foreach ($node->webform['components'] as $key => $component) {
          $component_name = str_replace('rdv_', '', $component["form_key"]);
          $component_name = str_replace('rappeler_', '', $component_name);
          $component_name = str_replace('ap_', '', $component_name);

          $arr = array('idkp', 'idkl', 'nom_prog', 'ville_prog', 'dept_prog', 'type_contact', 'date', 'huere', 'nom', 'prenom', 'telephone', 'email', 'adresse1', 'ville', 'code_postal', 'pays', 'PROV', 'message');
          if (isset($submission->data[$key][0])) {
            if (in_array($component_name, $arr)) {
              $submitted_datas[$component_name] = $submission->data[$key][0];
            }
          }
        }
      }

      $options[] = array_merge($options_default, $submitted_datas);
    }
  }

  $header = array(
    'idkp' => t('IDKP'),
    'idkl' => t('IDKL'),
    'nom_prog' => t('NOM_PROG'),
    'ville_prog' => t('VILLE_PROG'),
    'dept_prog' => t('DEPT_PROG'),
    'type_contact' => t('TYPE_CONTACT'),
    'DATE' => t('DATE'),
    'HEURE' => t('HEURE'),
    'nom' => t('NOM'),
    'prenom' => t('PRENOM'),
    'telephone' => t('TELEPHONE'),
    'email' => t('EMAIL'),
    'adresse1' => t('ADRESSE'),
    'ville' => t('VILLE '),
    'code_postal' => t('CODE_POSTAL'),
    'pays' => t('PAYS'),
    'PROV' => t('PROV'),
    'message' => t('MESSAGE'),
  );

  $form['contact_list'] = array(
    '#title' => 'Contact list',
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $options,
    '#empty' => t('No contact list found'),
  );

  $form['pager'] = array('#markup' => theme('pager'));

  $form['submit']['export'] = array(
    '#type' => 'submit',
    '#value' => t('Export'),
  );

  return $form;
}

function webform_contact_list_submitted_data_submit($form, $form_state) {
  $variables['header'] = $form_state['complete form']['contact_list']['#header'];
  $variables['rows'] = $form_state['complete form']['contact_list']['#rows'];
  $filename = 'contact_list_export.xls';
  drupal_add_http_header('Content-Type', 'application/xls');
  drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $filename);

  $output = '';
  $keys = array();
  foreach ($variables['header'] as $key => $value) {
    $keys[] = $value;
  }
  if ($keys) {
    $output .= implode("\t", $keys) . "\n";
  }
  foreach ($variables['rows'] as $value) {
    $output .= implode("\t", $value) . "\n";
  }
  print $output;
  exit;
}

/**
 * Render specific contact at bottom programme and bien page.
 */
function kandb_contact_specific_block_page($programme) {
  return theme('contact_specific_block_page', array('programme' => $programme));
}

function kandb_contact_get_telechargement_documents_url() {
  $webform_telechargement_documents = webform_features_machine_name_load('telechargement_documents');
  if (!isset($webform_telechargement_documents->nid)) {
    return '';
  }
  $url = url('node/' . $webform_telechargement_documents->nid);
  return $url;
}

function telechargement_documents_download_header($form, $form_state) {
  $parram = drupal_get_query_parameters();
  if ($parram['contenttype'] == 'bien') {
    $field = 'field_id_bien';
  }
  else { //programme
    $field = 'field_id_programme';
  }
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->fieldCondition($field, 'value', $form['submitted']['ma_idkp']['#default_value'], '=');
  $result = $query->execute();
  if (!empty($result['node'])) {
    $nid = key($result['node']);
  }
  $node = node_load($nid);
  $real_path = drupal_realpath('public://');
  if ($parram['contenttype'] == 'bien') {
    if (isset($parram['type']) && $parram['type'] == 'txt') {
      $programme = node_load($node->field_programme[LANGUAGE_NONE][0]['target_id']);
      if (isset($programme->field_plaquette_commerciale[LANGUAGE_NONE][0]['filename'])) {
        $plaquette_commerciale = file_create_url($programme->field_plaquette_commerciale[LANGUAGE_NONE][0]['uri']);
        $fileName = $programme->field_plaquette_commerciale[LANGUAGE_NONE][0]['filename'];
        $filePath = $real_path . '/' . $fileName;
        ;
      }
    }
    else {
      //get link zip file
      $fileName = $node->field_bien_plan['und'][0]['filename'];
      $filePath = $real_path . '/' . $fileName;
    }
  }
  else {
    if (isset($parram['download']) && $parram['download'] == 'zip') {
      $addMore = '_';
      $fileName = 'Programme' . $addMore . preg_replace('@[^a-z0-9-]+@', '-', strtolower($node->title)) . '.zip';
      if (file_exists($real_path . '/Programme/archive/' . $nid . '/')) {
        $filePath = $real_path . '/Programme/archive/' . $nid . '/' . $fileName;
      }
    }
    else {
      //download txt
      $fileName = $node->field_plaquette_commerciale['und'][0]['filename'];
      $filePath = $filePath = $real_path . '/' . $node->field_plaquette_commerciale['und'][0]['filename'];
    }
  }
  if ($filePath) {
    if (file_exists($filePath)) {
      ctools_include('ajax');
      ctools_add_js('ajax-responder');
      $commands[] = array('command' => 'closePopin');
      $programme_nid = $node->nid;
      $filezipName = 'Programme_' . preg_replace('@[^a-z0-9-]+@', '-', strtolower($node->title)) . '.zip';
      $document_uri = "public://Programme/archive/" . $programme_nid . "/" . $filezipName;
      if (file_exists($document_uri)) {
        $document_uri = base64_encode("public://Programme/archive/" . $programme_nid . "/" . $filezipName);
        $commands[] = ctools_ajax_command_redirect('document_download/' . $document_uri);
      }
      print ajax_render($commands);
      exit();
    }
  }
}

/**
 * Implements download document.
 */
function document_download($path_uri) {
  if ($path_uri) {
    $path_uri = base64_decode($path_uri);
    $content_disposition = 'attachment; filename="' . basename($path_uri) . '"';
    $headers = array
      (
      'Content-type' => 'application/octet-stream',
      'Content-Disposition' => $content_disposition,
      'Content-Transfer-Encoding' => 'binary',
    );
    file_transfer($path_uri, $headers);
  }
}

function kandb_contact_get_espace_vente_label() {
  $espace_vente_label = variable_get('kandb_bloc_espace_vente_default_label', 'Votre conseillère');
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == NULL) {
    $node = node_load(arg(1));
    $programme = NULL;
    if (isset($node->type) && $node->type == 'programme') {
      $programme = $node;
    }
    elseif (isset($node->type) && $node->type == 'bien') {
      if (isset($node->field_programme[LANGUAGE_NONE][0]['target_id'])) {
        $programme = node_load($node->field_programme[LANGUAGE_NONE][0]['target_id']);
      }
    }
    if (isset($programme->field_espace_vente_label[LANGUAGE_NONE][0]['value'])) {
      $espace_vente_label = $programme->field_espace_vente_label[LANGUAGE_NONE][0]['value'];
    }
  }
  return $espace_vente_label;
}
